<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- nxml -*- -->
<transfer>

  <section-def-cats>
    <def-cat n="nom">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nacr">
      <cat-item tags="n.acr"/>
    </def-cat>
    <def-cat n="nind">
      <cat-item tags="n.*.*.ind"/>
    </def-cat>
    <def-cat n="navn">					       
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="det">
      <cat-item tags="det.*"/>
    </def-cat>
    <def-cat n="detpos">			      <!-- min sin -->
      <cat-item tags="det.pos.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
    </def-cat>
    <def-cat n="vblex">
      <cat-item tags="vblex.*"/>
    </def-cat>
    <def-cat n="vblexinfpst">
      <cat-item tags="vblex.inf.pst"/>
    </def-cat>
    <def-cat n="vblexpp">
      <cat-item tags="vblex.pp"/>
    </def-cat>
    <def-cat n="vblex_bli">
      <cat-item lemma="bli" tags="vblex.pres"/>
      <cat-item lemma="bli" tags="vblex.inf"/>
    </def-cat>
  </section-def-cats>

    
  <section-def-attrs>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
    </def-attr>
    
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
      <attr-item tags="adj.posi"/>
      <attr-item tags="adj.comp"/>
      <attr-item tags="adj.sup"/>
      <attr-item tags="adj.ord.posi"/>
      <attr-item tags="adj.ord.comp"/>
      <attr-item tags="adj.ord.sup"/>
    </def-attr>

    <def-attr n="persona">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>


    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
      <attr-item tags="vblex.pstv"/>
    </def-attr>

    <def-attr n="temps">
      <attr-item tags="inf"/>
      <attr-item tags="imp"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="pp"/>
    </def-attr>

    <def-attr n="a_det">
      <attr-item tags="det"/>
      <attr-item tags="det.emph"/>
      <attr-item tags="det.ind"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="a_prn">
      <attr-item tags="prn.enc"/>
      <attr-item tags="prn.enc.ref"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="f"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="cas">
      <attr-item tags="nom"/>
      <attr-item tags="gen"/>
      <attr-item tags="acc"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="gender"/>
    <def-var n="pre_number"/>
    <def-var n="adj_gender"/>  
    <def-var n="n_number"/>  
  </section-def-vars>

  <section-def-macros>

    <def-macro n="set_number1" npar="1">
      <!-- arg.1: determiner
           "Heuristic": If ND, let pre_number be sp
      -->
      <choose>
        <when>
	  <test>
	    <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sp"/></equal>
	  </test>
	  <let><var n="pre_number"/><lit-tag v="sp"/></let>
        </when>
	<otherwise>
	  <let><var n="pre_number"/><clip pos="1" side="tl" part="nbr"/></let>
	</otherwise>
      </choose>
      <choose>
        <when>
	  <test>
	    <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="ND"/></equal>
	  </test>
	  <let><var n="pre_number"/><lit-tag v="sp"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_number2" npar="2">
      <!-- arg.1: noun, arg.2: determiner (or adjective)
	   If it's ND, take that of noun, o/w take that of determiner.
           If determiner is sp or nil, or noun is sp, take that of noun.
      -->
      <let><var n="pre_number"/><clip pos="2" side="tl" part="nbr"/></let>
      
      <choose><when>
	  <test><equal><var n="pre_number"/><lit-tag v="ND"/></equal></test>
          <let><var n="pre_number"/><clip pos="1" side="tl" part="nbr"/></let>
      </when></choose>
      
      <let><var n="n_number"/>    <var n="pre_number"/></let>
      
      <choose><when>
        <test><or>
          <equal><var n="n_number"/><lit-tag v="sp"/></equal>
          <equal><var n="n_number"/><lit v=""/></equal>
          <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sp"/></equal>
        </or></test>
        <let><var n="n_number"/><clip pos="1" side="tl" part="nbr"/></let>
      </when>
      </choose>
      
      <choose><when>
        <test><or>
          <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></equal>
          <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.top"/></equal>
        </or></test>
        <let><var n="n_number"/><lit v=""/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_gender1" npar="1">
      <!-- arg.1: determiner
           - default: keep determiner gender
           - GD in singular or sp gets m (only nouns may be mf sp)
           - plurals get no gender
           - make sure we never translate to f, in case
	     bidix has errors...
      -->
      <call-macro n="set_number1"> 
	<with-param pos="1"/> 
      </call-macro>
      <let><var n="gender"/><clip pos="1" side="tl" part="gen"/></let>
      <choose>
        <when>
	  <test><and>
	      <or>
                <equal><var n="pre_number"/><lit-tag v="sg"/></equal>
                <equal><var n="pre_number"/><lit-tag v="sp"/></equal>
              </or>
	      <equal><var n="gender"/><lit-tag v="GD"/></equal>
          </and></test>
	  <let><var n="gender"/><lit-tag v="m"/></let>
        </when>
	<when>
	  <test><equal><var n="pre_number"/><lit-tag v="pl"/></equal></test>
	  <let><var n="gender"/><lit v=""/></let>
	</when>
	<when>
	  <test><equal><var n="gender"/><lit-tag v="f"/></equal></test>
	  <let><var n="gender"/><lit-tag v="m"/></let>
	</when>
      </choose>
    </def-macro>

    <def-macro n="set_gender2" npar="2">
      <!-- arg.1: noun, arg.2: determiner (or adjective)
	   - iff sg AND has-some-gender, take gender of target noun 
	   - plurals get no gender (sp, however, may want mf);
	   - o/w take gender of target determiner
           - Finally, make sure we never translate to f, in case
	     bidix has errors...
      -->
      <call-macro n="set_number2"> 
	<with-param pos="1"/>
	<with-param pos="2"/> 
      </call-macro>
      <choose>
        <when>
          <test><and>
            <equal><var n="pre_number"/><lit-tag v="sg"/></equal>
            <not><equal>
              <clip pos="2" side="sl" part="gen"/>
              <lit v=""/>
            </equal></not>
            <!--               <equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal> -->
          </and></test>
	  <let><var n="gender"/><clip pos="1" side="tl" part="gen"/></let>
        </when>
	<when>
	  <test>
	    <equal><var n="pre_number"/><lit-tag v="pl"/></equal>
	  </test>
	  <let><var n="gender"/><lit v=""/></let>
	</when>
	<otherwise>
	  <let><var n="gender"/><clip pos="2" side="tl" part="gen"/></let>
	</otherwise>
      </choose>
      <choose>
	<when>
	  <test>
	    <equal><var n="gender"/><lit-tag v="f"/></equal>
	  </test>
	  <let><var n="gender"/><lit-tag v="m"/></let>
	</when>
      </choose>
    </def-macro>    

    <def-macro n="set_adj_gender" npar="1">
      <!-- arg.1: adjective (used for determination, "art")
          Assumes var gender is set, o/w we get empty string 
	   - if m or f or GD, use mf
	     (we might have GD if set_gender 'failed')
	   - o/w use what we're given.
         However, definite adjectives get no gender.
      -->
      <choose>
        <when>
	  <test>
	    <or>
	      <equal><var n="gender"/><lit-tag v="m"/></equal>
	      <equal><var n="gender"/><lit-tag v="f"/></equal>
	      <equal><var n="gender"/><lit-tag v="GD"/></equal>
	    </or>
	  </test>
	  <let><var n="adj_gender"/><lit-tag v="mf"/></let>
	</when>
	<otherwise>
	  <let><var n="adj_gender"/><var n="gender"/></let>
	</otherwise>
      </choose>
      <choose>
        <when>
          <test><equal><clip pos="1" side="tl" part="art"/><lit-tag v="def"/></equal></test>
          <let><var n="adj_gender"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>
    
</section-def-macros>

<section-rules>


    <rule comment="VBLEX_BLI VBLEX.PP - bli(r) lese => leses ">
      <pattern>
	<pattern-item n="vblex_bli"/>
	<pattern-item n="vblexpp"/>
      </pattern>
      <action>
        <out>
	  <lu>	    
            <clip pos="2" side="tl" part="lemh"/>
            <clip pos="2" side="tl" part="a_verb"/>
            <clip pos="1" side="tl" part="temps"/>
	    <lit-tag v="pass"/>
	    <clip pos="2" side="tl" part="lemq"/>
          </lu>
          <b pos="1"/>
        </out>
      </action>
    </rule>    
    <rule comment="VBLEX_BLI VBLEX.PP - blir ikkje lese => leses ikke ">
      <pattern>
	<pattern-item n="vblex_bli"/>
	<pattern-item n="adv"/>
	<pattern-item n="vblexpp"/>
      </pattern>
      <action>
        <out>
	  <lu>	    
            <clip pos="3" side="tl" part="lemh"/>
            <clip pos="3" side="tl" part="a_verb"/>
            <clip pos="1" side="tl" part="temps"/>
	    <lit-tag v="pass"/>
	    <clip pos="3" side="tl" part="lemq"/>
          </lu>
          <b pos="1"/>
          <lu><clip pos="2" side="tl" part="whole"/></lu>
          <b pos="2"/>
        </out>
      </action>
    </rule>
    <rule comment="VBLEX_BLI VBLEX.PP - blir nok ikkje lese => leses nok ikke ">
      <pattern>
	<pattern-item n="vblex_bli"/>
	<pattern-item n="adv"/>
	<pattern-item n="adv"/>
	<pattern-item n="vblexpp"/>
      </pattern>
      <action>
        <out>
	  <lu>	    
            <clip pos="4" side="tl" part="lemh"/>
            <clip pos="4" side="tl" part="a_verb"/>
            <clip pos="1" side="tl" part="temps"/>
	    <lit-tag v="pass"/>
	    <clip pos="4" side="tl" part="lemq"/>
          </lu>
          <b pos="1"/>
          <lu><clip pos="2" side="tl" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" side="tl" part="whole"/></lu>
          <b pos="3"/>
        </out>
      </action>
    </rule>

    <rule comment="VBLEX.INF.PST - lesast => leses ">
      <pattern>
	<pattern-item n="vblexinfpst"/>
      </pattern>
      <action>
        <out>
	  <lu>	    
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_verb"/>
	    <lit-tag v="inf"/>
	    <lit-tag v="pass"/>
	    <clip pos="1" side="tl" part="lemq"/>
          </lu>
        </out>
      </action>
    </rule>
    
    <rule comment="VBLEX
                   Just in case we have nb multiwords; which need
                   lemq after the inflected part.
                   This has to be below the passive rules.">
      <pattern>
        <pattern-item n="vblex"/>
      </pattern>
      <action>
        <out>
          <lu>	    
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_verb"/>
            <clip pos="1" side="tl" part="temps"/>
            <clip pos="1" side="tl" part="lemq"/>
          </lu>
        </out>
      </action>
    </rule>

    <rule comment="DET: kva => hvilken
                   If GD, choose m (we never mark determiners mf)">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="set_gender1"><with-param pos="1"/></call-macro>
        <out>
          <lu>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_det"/>
            <var n="gender"/>
            <var n="pre_number"/>
            <clip pos="1" side="tl" part="art"/>
	    <clip pos="1" side="tl" part="lemq"/>
          </lu>
        </out>
      </action>
    </rule>
    
    <rule comment="DET NACR: eit kl => et kl">
      <pattern>						       
        <pattern-item n="det"/>
        <pattern-item n="nacr"/>
      </pattern>
      <action>
        <out>
          <lu><clip pos="1" side="tl" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" side="tl" part="whole"/></lu>
        </out>
      </action>
    </rule>

    <rule comment="DET NOM">
      <pattern>						       
        <pattern-item n="det"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_gender2"> 
          <with-param pos="2"/>
          <with-param pos="1"/> 
        </call-macro>
        <out>
          <lu>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_det"/>
            <var n="gender"/>
	    <var n="pre_number"/>
	    <clip pos="1" side="tl" part="art"/>
            <clip pos="1" side="tl" part="lemq"/>
          </lu>
          <b pos="1"/>
          <lu>
	    <clip pos="2" side="tl" part="lemh"/>
            <clip pos="2" side="tl" part="a_nom"/>
            <clip pos="2" side="tl" part="gen"/>
	    <var n="n_number"/>
            <clip pos="2" side="tl" part="art"/>
	    <clip pos="2" side="tl" part="cas"/>	     
	    <clip pos="2" side="tl" part="lemq"/>
          </lu>
        </out>
      </action>
    </rule>

    <rule comment="DET ADJ NOM">
      <pattern>						       
        <pattern-item n="det"/>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_gender2"> 
          <with-param pos="3"/>
          <with-param pos="1"/> 
        </call-macro>
        <out>
          <lu>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_det"/>
            <var n="gender"/>
	    <var n="pre_number"/>
	    <clip pos="1" side="tl" part="art"/>
            <clip pos="1" side="tl" part="lemq"/>
          </lu>
          <b pos="1"/>
        </out>
        <let><var n="gender"/><clip pos="3" side="tl" part="gen"/></let>
	<call-macro n="set_adj_gender"><with-param pos="2"/></call-macro>
        <out>
          <lu>
            <clip pos="2" side="tl" part="lemh"/>
            <clip pos="2" side="tl" part="a_adj"/>
            <var n="adj_gender"/>
            <clip pos="2" side="tl" part="nbr"/>
            <clip pos="2" side="tl" part="art"/>
            <clip pos="2" side="tl" part="lemq"/>
          </lu>
          <b pos="2"/>
          <lu>
	    <clip pos="3" side="tl" part="lemh"/>
            <clip pos="3" side="tl" part="a_nom"/>
            <clip pos="3" side="tl" part="gen"/>
	    <var n="n_number"/>
            <clip pos="3" side="tl" part="art"/>
	    <clip pos="3" side="tl" part="cas"/>	     
	    <clip pos="3" side="tl" part="lemq"/>
          </lu>
        </out>
      </action>
    </rule>

    <rule comment="ADJ: open(m) => åpen(mf)">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
	<let><var n="gender"/><clip pos="1" side="tl" part="gen"/></let>
	<call-macro n="set_adj_gender"><with-param pos="1"/></call-macro>
        <out>
          <lu>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_adj"/>
            <var n="adj_gender"/>
            <clip pos="1" side="tl" part="nbr"/>
            <clip pos="1" side="tl" part="art"/>
            <clip pos="1" side="tl" part="lemq"/>
          </lu>
        </out>
      </action>
    </rule>
    
</section-rules>
</transfer>
