<?xml version="1.0" encoding="utf-8"?>
<transfer default="chunk">
  <!-- TODO:
       *   De. Deres måte å sykle
         - Dei. Måten dei syklar
         + Dei. måten De syklar
       * POSGEN måte å VBLEXINF needs to be chunked
       * boka vart [lese vs lesen], concord
         VBLEXPASS rule should have adj.pp.nt.sg.ind as the second chunk
  -->
  <section-def-cats>
    <!-- compound lhs's are never genitive: -->
    <def-cat n="ncmp">
      <cat-item tags="n.*.cmp"/>
      <cat-item tags="n.*.cmp.guio"/>
    </def-cat>
    <def-cat n="ngen">
      <cat-item tags="n.*.gen"/>
    </def-cat>
    <def-cat n="nind">
      <cat-item tags="n.*.*.ind"/>
      <cat-item tags="n.*.*.ind.gen"/>
    </def-cat>
    <def-cat n="nind_keep_gen_s"
             c="Owned nouns where we want the owner ngen to keep the genitive-s">
      <cat-item tags="n.*.*.ind" lemma="beste"/>
      <cat-item tags="n.*.sg.ind" lemma="tur"/>
    </def-cat>
    <def-cat n="nind_gen2cmp"
             c="Owned nouns where we want to turn it into a compound regardless of preceding lemma">
      <cat-item tags="n.*.sg.ind" lemma="verdighet"/>
      <cat-item tags="n.*.sg.ind" lemma="vedtak"/>
      <cat-item tags="n.*.sg.ind" lemma="ledelse"/>
      <cat-item tags="n.*.sg.ind" lemma="virksomhet"/>
      <cat-item tags="n.*.sg.ind" lemma="administrasjon"/>
    </def-cat>
    <!-- bigrams2cmp -->
    <def-cat n="ngen_byplan"
             c="Owner nouns where we want to turn it into a compound following preceding word">
      <cat-item tags="n.*.gen" lemma="skole"/>
      <cat-item tags="n.*.gen" lemma="høgskole"/>
      <cat-item tags="n.*.gen" lemma="høyskole"/>
      <cat-item tags="n.*.gen" lemma="universitet"/>
      <cat-item tags="n.*.gen" lemma="kommune"/>
      <cat-item tags="n.*.gen" lemma="fylkeskommune"/>
      <cat-item tags="n.*.gen" lemma="fylke"/>
      <cat-item tags="n.*.gen" lemma="by"/>
      <cat-item tags="n.*.gen" lemma="regjering"/>
      <cat-item tags="n.*.gen" lemma="barnehage"/>
      <cat-item tags="n.*.gen" lemma="museum"/>
      <cat-item tags="n.*.gen" lemma="sporvei"/>
      <cat-item tags="n.*.gen" lemma="sykehus"/>
      <cat-item tags="n.*.gen" lemma="politi"/>
      <cat-item tags="n.*.gen" lemma="landbruk"/>
      <cat-item tags="n.*.gen" lemma="kultur"/>
      <cat-item tags="n.*.gen" lemma="foretak"/>
      <cat-item tags="n.*.gen" lemma="selskap"/>
      <cat-item tags="n.*.gen" lemma="næringsliv"/>
      <cat-item tags="n.*.gen" lemma="seminar"/>
      <cat-item tags="n.*.gen" lemma="bank"/>
      <cat-item tags="n.*.gen" lemma="krone"/>
      <cat-item tags="n.*.gen" lemma="opsjon"/>
      <cat-item tags="n.*.gen" lemma="aksje"/>
      <cat-item tags="n.*.gen" lemma="varelager"/>
      <cat-item tags="n.*.gen" lemma="kunnskap"/>
      <cat-item tags="n.*.gen" lemma="forsvar"/>
      <cat-item tags="n.*.gen" lemma="parti"/>
      <cat-item tags="n.*.gen" lemma="elevråd"/>
      <cat-item tags="n.*.gen" lemma="klasse"/>
      <cat-item tags="n.*.gen" lemma="anlegg"/>
      <cat-item tags="n.*.gen" lemma="kongress"/>
      <cat-item tags="n.*.gen" lemma="militær"/>
      <cat-item tags="n.*.gen" lemma="kommunistparti"/>
      <cat-item tags="n.*.gen" lemma="departement"/>
      <cat-item tags="n.*.gen" lemma="skatterett"/>
      <cat-item tags="n.*.gen" lemma="måned"/>
      <cat-item tags="n.*.gen" lemma="organisasjon"/>
      <cat-item tags="n.*.gen" lemma="fakultet"/>
      <cat-item tags="n.*.gen" lemma="forbund"/>
      <cat-item tags="n.*.gen" lemma="avdeling"/>
      <cat-item tags="n.*.gen" lemma="føretak"/>
      <cat-item tags="n.*.gen" lemma="kommisjon"/>
      <cat-item tags="n.*.gen" lemma="bruker"/>
      <cat-item tags="n.*.gen" lemma="bibliotek"/>
      <cat-item tags="n.*.gen" lemma="tomt"/>
      <cat-item tags="n.*.gen" lemma="eiendom"/>
      <cat-item tags="n.*.gen" lemma="sommer"/>
      <cat-item tags="n.*.gen" lemma="vår"/>
      <cat-item tags="n.*.gen" lemma="høst"/>
      <cat-item tags="n.*.gen" lemma="vinter"/>
      <cat-item tags="n.*.gen" lemma="turist"/>
      <cat-item tags="n.*.gen" lemma="nemnd"/>
    </def-cat>
    <def-cat n="nind_gen2cmp_byplan"
             c="Owned nouns where we want to turn it into a compound given preceding word">
      <cat-item tags="n.*.sg.ind" lemma="bibliotek"/>
      <cat-item tags="n.*.sg.ind" lemma="område"/>
      <cat-item tags="n.*.sg.ind" lemma="elev"/>
      <cat-item tags="n.*.sg.ind" lemma="rektor"/>
      <cat-item tags="n.*.sg.ind" lemma="lærer"/>
      <cat-item tags="n.*.sg.ind" lemma="ansatt"/>
      <cat-item tags="n.*.sg.ind" lemma="kantine"/>
      <cat-item tags="n.*.sg.ind" lemma="personale"/>
      <cat-item tags="n.*.sg.ind" lemma="visjon"/>
      <cat-item tags="n.*.sg.ind" lemma="hverdag"/>
      <cat-item tags="n.*.sg.ind" lemma="verdi"/>
      <cat-item tags="n.*.sg.ind" lemma="ferie"/>
      <cat-item tags="n.*.sg.ind" lemma="reglement"/>
      <cat-item tags="n.*.sg.ind" lemma="bygning"/>
      <cat-item tags="n.*.sg.ind" lemma="økonomi"/>
      <cat-item tags="n.*.sg.ind" lemma="plan"/>
      <cat-item tags="n.*.sg.ind" lemma="areal"/>
      <cat-item tags="n.*.sg.ind" lemma="grense"/>
      <cat-item tags="n.*.sg.ind" lemma="drift"/>
      <cat-item tags="n.*.sg.ind" lemma="tilbud"/>
      <cat-item tags="n.*.sg.ind" lemma="forbruk"/>
      <cat-item tags="n.*.sg.ind" lemma="forslag"/>
    </def-cat>
    <!-- n does not include compound lhs's: -->
    <def-cat n="n">
      <cat-item tags="n.*.cmp-split"/>
      <cat-item tags="n.*.def"/>
      <cat-item tags="n.*.ind"/>
      <cat-item tags="n.*.acr"/>
      <cat-item tags="n.*.sp"/>
      <cat-item tags="n.*.gen"/>
    </def-cat>
    <!-- is this ever a compound-lhs? TODO -->
    <def-cat n="np">
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nom">
      <cat-item tags="n.*.*.*"/>
      <cat-item tags="n.*.*.*.gen"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nacr">
      <cat-item tags="n.acr"/>
    </def-cat>
    <def-cat n="ndef">
      <cat-item tags="n.*.def"/>
      <cat-item tags="n.*.def.gen"/>
    </def-cat>
    <def-cat n="ngen_time_meas">
      <cat-item tags="n.m.sg.*.gen"   lemma="liter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="liter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="centimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="centimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="millimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="millimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kubikkmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kubikkmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kvadratkilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kvadratkilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="centiliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="centiliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="dekaliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="dekaliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="dekameter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="dekameter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="desiliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="desiliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="desimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="desimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="hektoliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="hektoliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kilopondmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kilopondmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kubikkcentimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kubikkcentimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kubikkdesimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kubikkdesimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kvadratmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kvadratmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="løpemeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="løpemeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="milliliter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="milliliter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="nanometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="nanometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="sekundmeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="sekundmeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="spaltemillimeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="spaltemillimeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tonnkilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tonnkilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="passasjerkilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="passasjerkilometer"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="rutemeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="rutemeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="laupemeter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="laupemeter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="meter"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="meter"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="kilometer"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="kilometer"/>

      <cat-item tags="n.m.sg.*.gen"   lemma="tredel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tredel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="firedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="firedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="femdel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="femdel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="seksdel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="seksdel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="sjudel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="sjudel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="syvdel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="syvdel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="åttedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="åttedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="nidel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="nidel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tidel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tidel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="ellevedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="ellevedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tolvdel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tolvdel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tjuedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tjuedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tyvedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tyvedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tredjedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tredjedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="fjerdedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="fjerdedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="femtedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="femtedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="sjettedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="sjettedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="sjuendedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="sjuendedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="syvendedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="syvendedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="åttendedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="åttendedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="niendedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="niendedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tiendedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tiendedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="ellevtedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="ellevtedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tolvtedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tolvtedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tjuendedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tjuendedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="tyvendedel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="tyvendedel"/>
      <cat-item tags="n.m.sg.*.gen"   lemma="hundredel"/>
      <cat-item tags="n.m.pl.ind.gen" lemma="hundredel"/>

      <cat-item tags="n.*.sg.*.gen"   lemma="mil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="mil"/>
      <cat-item tags="n.*.sg.*.gen"   lemma="sjømil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="sjømil"/>
      <cat-item tags="n.*.sg.*.gen"   lemma="kvartmil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="kvartmil"/>
      <cat-item tags="n.*.sg.*.gen"   lemma="halvmil"/>
      <cat-item tags="n.*.pl.ind.gen" lemma="halvmil"/>

      <cat-item tags="n.nt.sg.*.gen"   lemma="fjorår"/>
      <cat-item tags="n.nt.pl.ind.gen" lemma="fjorår"/>
      <cat-item tags="n.nt.sg.*.gen"   lemma="år"/>
      <cat-item tags="n.nt.pl.ind.gen" lemma="år"/>
      <cat-item tags="n.m.sg.*.gen"    lemma="dag"/>
      <cat-item tags="n.m.pl.ind.gen"  lemma="dag"/>
      <cat-item tags="n.m.sg.*.gen"    lemma="gårsdag"/>
      <cat-item tags="n.m.pl.ind.gen"  lemma="gårsdag"/>
      <cat-item tags="n.*.sg.*.gen"    lemma="uke"/>
      <cat-item tags="n.*.pl.ind.gen"  lemma="uke"/>

      <cat-item tags="n.*.pl.def.gen"  lemma="tid"/>

      <cat-item tags="n.m.*.gen"  lemma="prosent"/>
    </def-cat>
    <def-cat n="pr">
      <cat-item tags="pr.*"/>
      <cat-item tags="pr"/>
    </def-cat>
    <def-cat n="det">
      <cat-item tags="det.*"/>
    </def-cat>
    <def-cat n="prn">
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="cnjcoo">
      <cat-item tags="cnjcoo.*"/>
      <cat-item tags="cnjcoo"/>
    </def-cat>
    <def-cat n="detpos">
      <cat-item tags="det.pos.*"/>
    </def-cat>
    <def-cat n="detnonpos">
      <cat-item tags="det.def.*"/>
      <cat-item tags="det.dem.*"/>
      <cat-item tags="det.emph.*"/>
      <cat-item tags="det.itg.*"/>
      <cat-item tags="det.qnt.*"/>
    </def-cat>
    <def-cat n="posgen">
      <cat-item tags="det.pos.*"/>
      <cat-item tags="n.*.gen"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="preadj-adv">
      <cat-item lemma="ikke" tags="adv"/>
      <cat-item lemma="for" tags="adv"/>
      <cat-item lemma="altfor" tags="adv"/>
      <cat-item lemma="forholdsvis" tags="adv"/>
      <cat-item lemma="forhåpentlig" tags="adv"/>
      <cat-item lemma="forholdsvis" tags="adv"/>
      <cat-item lemma="hvor" tags="adv"/>
      <cat-item lemma="kanon" tags="adv"/>
      <cat-item lemma="sørpe" tags="adv"/>
      <cat-item lemma="bom" tags="adv"/>
      <cat-item lemma="dønn" tags="adv"/>
      <cat-item lemma="eitrende" tags="adv"/>
      <cat-item lemma="forhakkende" tags="adv"/>
      <cat-item lemma="fullstendig" tags="adv"/>
      <cat-item lemma="delvis" tags="adv"/>
    </def-cat>
    <def-cat n="adjind">
      <cat-item tags="adj.*.*.*.ind"/>
      <cat-item tags="adj.*.pl"/>
      <cat-item tags="adj.comp.*"/>
      <cat-item tags="adj.sint.comp.*"/>
      <cat-item tags="adj.pprs"/>                              <!--hvor truende-->
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
    </def-cat>
    <def-cat n="infm">
      <cat-item lemma="å" tags="part"/>
    </def-cat>
    <def-cat n="sin">
      <cat-item lemma="sin" tags="det.pos.*"/>
    </def-cat>
    <def-cat n="totalt">
      <cat-item lemma="total" tags="adj.pst.nt.sg.ind"/>
      <cat-item lemma="Total" tags="adj.pst.nt.sg.ind"/>
    </def-cat>
    <def-cat n="antall">
      <cat-item lemma="antall" tags="n.nt.sg.ind"/>
      <cat-item lemma="antall" tags="n.nt.pl.ind"/>
    </def-cat>
    <def-cat n="n_keep_sin" c="keep prefixed 'sin' in 'mot sin vilje', 'på sin side' etc.">
      <cat-item lemma="vilje" tags="n.*.sg.ind"/>
      <cat-item lemma="side" tags="n.*.sg.ind"/>
      <cat-item lemma="sak" tags="n.*.sg.ind"/>
      <cat-item lemma="tid" tags="n.*.sg.ind"/>
      <cat-item lemma="vei" tags="n.*.sg.ind"/>
      <cat-item lemma="veg" tags="n.*.sg.ind"/>
    </def-cat>
    <def-cat n="måte">
      <cat-item lemma="måte" tags="n.m.sg.ind"/>
    </def-cat>
    <def-cat n="vblex">
      <cat-item tags="vblex.*"/>
    </def-cat>
    <def-cat n="vblexpp">
      <cat-item tags="vblex.pp"/>
      <cat-item tags="vblex.pp.*"/>
    </def-cat>
    <def-cat n="vblexinf">
      <cat-item tags="vblex.inf"/>
    </def-cat>
    <def-cat n="vblexinf_or_infpass">
      <cat-item tags="vblex.inf"/>
      <cat-item tags="vblex.inf.pasv"/>
    </def-cat>
    <def-cat n="vblexinfpass">
      <cat-item tags="vblex.inf.pasv"/>
    </def-cat>
    <def-cat n="vblexpassfv">
      <cat-item tags="vblex.pres.pasv"/>
      <cat-item tags="vblex.pret.pasv"/>
      <cat-item tags="vblex.pstv.pres"/>
    </def-cat>
    <def-cat n="vblexaux">
      <cat-item tags="vblex.*" lemma="kunne"/>
      <cat-item tags="vblex.*" lemma="burde"/>
      <cat-item tags="vblex.*" lemma="skulle"/>
      <cat-item tags="vblex.*" lemma="måtte"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
    </def-attr>
    <def-attr n="persona">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
      <attr-item tags="vblex.pstv"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="inf"/>
      <attr-item tags="imp"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="pp"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pasv"/>
    </def-attr>
    <def-attr n="a_det">
      <attr-item tags="det"/>
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.qnt.neg"/>
      <attr-item tags="det.pos"/>
    </def-attr>

    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
      <attr-item tags="adj.ord"/>
      <attr-item tags="adj.sint"/>
    </def-attr>

    <def-attr n="grau">
      <attr-item tags="pst"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
    </def-attr>

    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="f"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="cas">
      <attr-item tags="nom"/>
      <attr-item tags="gen"/>
      <attr-item tags="acc"/>
      <attr-item tags="CD"/>
    </def-attr>
    <def-attr n="a_casedrop" c="Mark that we'd like to drop gen-case in t3x">
      <attr-item tags="casedrop"/>
    </def-attr>
    <def-attr n="a_defdrop" c="Mark that we'd like to change defnes to ind in t3x">
      <attr-item tags="defdrop"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
    </def-attr>
    <def-attr n="expl">
      <attr-item tags="expl"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="gen-prep"/>
    <def-var n="caseFirstWord"/>
    <def-var n="c_name"         c="chunk name"/>
    <def-var n="c_lemtag"       c="chunk lemma-tag"/>
    <def-var n="ntags"/>
    <def-var n="aux"/>
    <def-var n="defnes"/>
    <def-var n="grau_aux"       c="lexical unit containing meir/mest if translating from sint to non-sint"/>
    <def-var n="c_lemq"         c="lemq part to output in chunk"/>
    <def-var n="out_lemq"       c="lemq part to output after chunk"/>
  </section-def-vars>

  <section-def-lists>
    <def-list n="ind-gen-i" c="høstens kamp→kampen i haust, remove definiteness for these">
      <list-item v="haust"/>
      <list-item v="vår"/>
      <list-item v="sommar"/>
      <list-item v="vinter"/>
    </def-list>
    <!-- POSSESSED-DEPENDENT EXCEPTIONS TODO: omkretsen til verda,
         lengden på dokumentet, ryktet til styret, lukta av/etter
         kua... (although this could be coded in all the dictionaries,
         or added by CG, it's probably simpler and more compact to do
         it with def-list and macros) -->
    <def-list n="gen-i">
      <list-item v="verd"/>
      <list-item v="rike"/>
      <list-item v="tid"/>
      <list-item v="haust"/>
      <list-item v="vår"/>
      <list-item v="sommar"/>
      <list-item v="vinter"/>
      <list-item v="framtid"/>
      <list-item v="fortid"/>
      <list-item v="fritid"/>
      <list-item v="istid"/>
      <list-item v="ettertid"/>
      <list-item v="vintertid"/>
      <list-item v="regjeringstid"/>
      <list-item v="mørketid"/>
      <list-item v="kollektiv"/>
      <list-item v="foreining"/>
      <list-item v="by"/>
      <list-item v="dal"/>
      <list-item v="luft"/>
      <list-item v="radio"/>
      <list-item v="hav"/>
      <list-item v="ryggmarg"/>
      <list-item v="styre"/>
      <list-item v="fylke"/>
      <list-item v="hus"/>
      <list-item v="land"/>
      <list-item v="ferie"/>
      <list-item v="sak"/>
      <list-item v="århundre"/>
      <list-item v="dokument"/>
      <list-item v="draperi"/>
      <list-item v="brev"/>
      <list-item v="høyringsbrev"/>
    </def-list>
    <def-list n="ind-gen-på" c="fredagens kamp→kampen på fredag, remove definiteness for these">
      <list-item v="måndag"/>
      <list-item v="tysdag"/>
      <list-item v="onsdag"/>
      <list-item v="torsdag"/>
      <list-item v="fredag"/>
      <list-item v="laurdag"/>
      <list-item v="søndag"/>
    </def-list>
    <def-list n="gen-på">
      <list-item v="måndag"/>
      <list-item v="tysdag"/>
      <list-item v="onsdag"/>
      <list-item v="torsdag"/>
      <list-item v="fredag"/>
      <list-item v="laurdag"/>
      <list-item v="søndag"/>
      <list-item v="dag"/>
      <list-item v="øy"/>
      <list-item v="topp"/>
      <list-item v="kjøkken"/>
      <list-item v="skip"/>
    </def-list>
    <def-list n="gen-av">
      <list-item v="bok"/>
    </def-list>
    <def-list n="gen-for">
      <list-item v="sikta"/>    <!-- Den siktedes situasjon TODO -->
    </def-list>
    <def-list n="gen-frå">
      <list-item v="UEFA"/>    <!-- UEFAs forslag TODO (men ikkje UEFAs leder, må sjå på begge ledd …) -->
    </def-list>
    <!-- TODO: see gen-av-head etc. in sme-nob.t1x -->

    <def-list n="det_indef">
      <!-- feels like these should have their own
           sub-pos... «<det><dem> som kan ha <ind> etter seg på
           bokmål» -->
      <list-item v="denne"/>
      <list-item v="disse"/>
      <list-item v="dette"/>
      <list-item v="den"/>
      <list-item v="de"/>
    </def-list>

    <def-list n="vere_pass"
              c="Verbs which require vere instead of bli/verte.">
      <list-item v="vite"/>
      <list-item v="eige"/>
    </def-list>

    <def-list n="adj-genders" c="possible nno/nob adj genders">
      <list-item v="&lt;m&gt;"/>
      <list-item v="&lt;mf&gt;"/>
      <list-item v="&lt;f&gt;"/>
      <list-item v="&lt;nt&gt;"/>
      <list-item v="&lt;un&gt;"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>

    <def-macro n="stash_case_in_ntags" npar="1"
               c="arg.1: noun. Puts tags of noun in ntags (for use as chunk tags).">
      <let><var n="ntags"/><clip pos="1" side="tl" part="tags"/></let>
      <choose><when>
        <test><not><equal><clip pos="1" side="tl" part="cas"/><lit v=""/></equal></not></test>
        <append n="ntags"><lit-tag v="casedrop"/></append>
      </when></choose>
      <choose><when>
        <test><not><equal><clip pos="1" side="tl" part="a_defdrop"/><lit v=""/></equal></not></test>
        <let><clip pos="1" side="tl" part="a_defdrop"/><lit v=""/></let>
      </when></choose>
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="gen"/><lit-tag v="nt"/></equal></test>
          <append n="ntags"><lit-tag v="sl-nt"/></append>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="gen"/><lit-tag v="m"/></equal></test>
          <append n="ntags"><lit-tag v="sl-m"/></append>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="gen"/><lit-tag v="f"/></equal></test>
          <append n="ntags"><lit-tag v="sl-f"/></append>
        </when>
      </choose>
    </def-macro>

    <def-macro n="switch_cases" npar="2">
      <choose>
        <when>
          <test><not>
            <and>
              <equal><clip pos="2" side="tl" part="lemh"/><lit v="De"/></equal>
              <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
              <equal><clip pos="2" side="tl" part="persona"/><lit-tag v="p2"/></equal>
            </and>
          </not></test>
          <let><var n="caseFirstWord"/><get-case-from pos="1"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
          <let><clip pos="1" side="tl" part="lemh"/><get-case-from pos="2"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
          <modify-case><clip pos="2" side="tl" part="lemh"/><var n="caseFirstWord"/></modify-case>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_caseFirstWord" npar="1">
      <!-- TODO: Put a marker for acronyms where we don't want to copy case from them; then drop the tag -->
      <let><var n="caseFirstWord"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
      <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
    </def-macro>

    <def-macro n="set_lemq" npar="1" c="make lemq its own chunk iff we're translating from non-mwe to mwe">
      <choose>
        <when>
          <test>
            <and>
              <equal><clip pos="1" side="sl" part="lemq"/><lit v=""/></equal>
              <not><equal><clip pos="1" side="tl" part="lemq"/><lit v=""/></equal></not>
            </and>
          </test>
          <let><var n="c_lemq"/><lit v=""/></let>
          <let>
            <var n="out_lemq"/>
            <concat>
              <lit v="^lemq"/>
              <lit-tag v="vblex.lemq"/>
              <lit v="}^"/>
              <clip pos="1" side="tl" part="lemq"/>
              <lit v="$}$"/>
            </concat>
          </let>
        </when>
        <otherwise>
          <let><var n="c_lemq"/><clip pos="1" side="tl" part="lemq"/></let>
          <let><var n="out_lemq"/><lit v=""/></let>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_caseFirstWord2" npar="2">
      <!-- arg.1: possessed noun. arg.2: det.pos, gives typographic case -->
      <choose>
        <when>
          <test><not>
            <and>
              <equal><clip pos="2" side="tl" part="lemh"/><lit v="De"/></equal>
              <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
              <equal><clip pos="2" side="tl" part="persona"/><lit-tag v="p2"/></equal>
            </and>
          </not></test>
          <let><var n="caseFirstWord"/><get-case-from pos="2"><lit v="aa"/></get-case-from></let>
          <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_aux" npar="1"
               c="arg.1: main/content verb">
      <let><var n="aux"/><lit v=""/></let>
      <choose>
        <when>
          <test><in><clip pos="1" side="tl" part="lemh"/><list n="vere_pass"/></in></test>
          <let><var n="aux"/><lit v="^vere"/></let>
        </when>
        <otherwise>
          <let><var n="aux"/><lit v="^bli"/></let>
        </otherwise>
      </choose>
      <append n="aux">
        <clip pos="1" side="tl" part="a_verb"/>
        <clip pos="1" side="tl" part="temps"/>
        <lit v="$"/>
      </append>
    </def-macro>
    <def-macro n="set_aux2" npar="2"
               c="arg.1: main/content verb; arg.2: gives case">
      <let><var n="aux"/><lit v=""/></let>
      <choose>
        <when>
          <test><in><clip pos="1" side="tl" part="lemh"/><list n="vere_pass"/></in></test>
          <let><var n="aux"/><get-case-from pos="2"><lit v="^vere"/></get-case-from></let>
        </when>
        <otherwise>
          <let><var n="aux"/><get-case-from pos="2"><lit v="^bli"/></get-case-from></let>
        </otherwise>
      </choose>
      <append n="aux">
        <clip pos="1" side="tl" part="a_verb"/>
        <clip pos="1" side="tl" part="temps"/>
        <lit v="$"/>
      </append>
    </def-macro>

    <!-- Macros which set concordance variables: -->
    <def-macro n="set_gender1.adj" npar="1"
               c="arg.1: adj">
      <choose><when>
        <test><or>
          <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="m"/></equal>
          <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="GD"/></equal>
        </or></test>
        <let><clip pos="1" side="tl" part="gen"/><lit-tag v="mf"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_gender2.n.adj" npar="2"
               c="arg.1: noun, arg.2: adjective
                  Only take noun gender if adj is GD (in which case we may have adj.f in nn.dix),
                  or if noun has changed gender (if not GD, don't allow adj.f as target).
                  (We want to allow 'helt.nt svart.mf katt.m', no gender change nor GD on 'helt',
                   but o/w make sure adj corresponds: 'helt.nt forfatterskap => heil.mf forfattarskap')">
      <choose><when>
        <test><and>
          <in><clip pos="1" side="tl" part="gen"/><list n="adj-genders"/></in>
          <or>
            <equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal>
            <not><equal><clip pos="1" side="sl" part="gen"/><clip pos="1" side="tl" part="gen"/></equal></not>
          </or>
        </and></test>
        <choose>
          <when>
            <test><and>
              <not><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal></not>
              <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="f"/></equal>
            </and></test>
            <let><clip pos="2" side="tl" part="gen"/><lit-tag v="mf"/></let>
          </when>
          <otherwise>
            <let><clip pos="2" side="tl" part="gen"/><clip pos="1" side="tl" part="gen"/></let>
          </otherwise>
        </choose>
      </when>
      </choose>
      <call-macro n="set_gender1.adj"><with-param pos="2"/></call-macro>
    </def-macro>



    <def-macro n="set_grau_aux1" npar="1"
               c="arg.1: adjective
                  When translating from sint to non-sint, put «meir/mest» in grau_aux-variable.

                  Assumes c_name has been set!">
      <choose>
        <when>
          <test><and>
            <equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj.sint"/></equal>
            <not><equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj.sint"/></equal></not>
            <or>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="comp"/></equal>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="sup"/></equal>
            </or>
          </and></test>

          <let>
            <var n="grau_aux"/>
            <concat>
              <lit v="^mykje"/>
              <lit-tag v="adj"/>
              <lit-tag v="sint"/>
              <clip pos="1" side="tl" part="grau"/>
              <lit-tag v="un"/>
              <lit-tag v="sp"/>
            </concat>
          </let>
          <choose><when>
            <test><equal><clip pos="1" side="tl" part="grau"/><lit-tag v="sup"/></equal></test>
            <append n="grau_aux"><lit-tag v="ind"/></append>
          </when></choose>
          <append n="grau_aux"><lit v="$ "/></append>

          <let>
            <var n="c_name"/>
            <concat>
              <lit v="adj_"/>
              <var n="c_name"/>
            </concat>
          </let>

          <choose>
            <when>
              <test><equal><clip pos="1" side="sl" part="art"/><lit-tag v="def"/></equal></test>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="adj.pst.un.sp.def"/></let>
            </when>
            <otherwise>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="adj.pst.nt.sg.ind"/></let>
            </otherwise>
          </choose>
        </when>

        <otherwise>
          <let>
            <var n="grau_aux"/><lit v=""/>
          </let>
        </otherwise>

      </choose>
    </def-macro>

    <def-macro n="set_grau_aux2" npar="2"
               c="arg.1: adjective arg.2: adjective
                  When translating from «meir/mest» non-sint to sint, remove «meir/mest», empty grau_aux-variable.
                  When translating from (first arg) sint to non-sint, put «meir/mest» in grau_aux-variable.

                  Assumes c_name has been set!">
      <choose>
        <when>
          <test><and>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal>
            <or>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="comp"/></equal>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="sup"/></equal>
            </or>
            <not><equal><clip pos="2" side="sl" part="a_adj"/><lit-tag v="adj.sint"/></equal></not>
            <equal><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj.sint"/></equal>
          </and></test>
          <!-- The second adj is synthetic, so copy tags from first adj: -->
          <let><var n="defnes"/><clip pos="2" side="tl" part="art"/></let>
          <let><clip pos="2" side="tl" part="tags"/><clip pos="1" side="tl" part="tags"/></let>
          <let><clip pos="2" side="tl" part="art"/><var n="defnes"/></let>
          <!-- And delete the first (meir/mest) adj: -->
          <let><clip pos="1" side="tl" part="whole"/><lit v=""/></let>
          <let><var n="grau_aux"/><lit v=""/></let>
        </when>

        <otherwise>
          <!-- Or maybe we want to _add_ meir/mest: -->
          <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
          <!-- and fix tags on the second adj (but no new aux if only second adj is non-pst; TODO better) -->
          <choose><when>
            <test><and>
              <equal><clip pos="2" side="sl" part="a_adj"/><lit-tag v="adj.sint"/></equal>
              <not><equal><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj.sint"/></equal></not>
              <or>
                <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="comp"/></equal>
                <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="sup"/></equal>
              </or>
            </and></test>
            <choose>
              <when>
                <test><equal><clip pos="2" side="sl" part="art"/><lit-tag v="def"/></equal></test>
                <let><clip pos="2" side="tl" part="tags"/><lit-tag v="adj.pst.un.sp.def"/></let>
              </when>
              <otherwise>
                <let><clip pos="2" side="tl" part="tags"/><lit-tag v="adj.pst.nt.sg.ind"/></let>
              </otherwise>
            </choose>
          </when></choose>
        </otherwise>
      </choose>
    </def-macro>

    <!-- Output macros: -->
    <def-macro n="out_ndef" npar="2">
      <!-- arg.1: possessed noun. arg.2 gives typographic case

           Strip case, add definiteness.  -->
      <call-macro n="set_caseFirstWord2">
        <with-param pos="1"/>
        <with-param pos="2"/>
      </call-macro>
      <let><clip pos="1" side="tl" part="art"/><lit-tag v="def"/></let>
      <out>
        <chunk name="n" case="caseFirstWord">
          <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
          <lu>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_nom"/>
            <clip pos="1" side="tl" part="gen"/>
            <clip pos="1" side="tl" part="nbr"/>
            <clip pos="1" side="tl" part="art"/>
            <clip pos="1" side="tl" part="lemq"/>
          </lu>
        </chunk>
      </out>
    </def-macro>

    <def-macro n="out_posgen_subj" npar="2">
      <!-- arg.1: possessor, either genitive noun or det.pos.
           arg.2: gives typographic case
           Assumes no variables.
           Turns eg. "min" into "eg", "naboens" into "naboen".
           Strips case both from chunk and word.
      -->
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_det"/><lit-tag v="det.pos"/></equal></test>
          <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
          <choose>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="min"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="eg"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p1.mf.sg.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="din"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="du"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p2.mf.sg.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="sin"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="seg"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.ref.p3.un.sp.acc"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="hennar"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="ho"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p3.f.sg.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="hans"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="han"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p3.m.sg.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="dens"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="den"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p3.mf.sg.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="dets"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="den"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p3.nt.sg.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="vår"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="vi"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p1.un.pl.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="dykkar"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="de"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p2.un.pl.nom"/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="deira"/></equal></test>
              <let><clip pos="1" side="tl" part="lemh"/><lit v="dei"/></let>
              <let><clip pos="1" side="tl" part="tags"/><lit-tag v="prn.pers.p3.un.pl.nom"/></let>
            </when>
          </choose>
          <out>
            <chunk name="prn" case="caseFirstWord">
              <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="tags"/>
              </lu>
            </chunk>
          </out>
        </when>
      <otherwise>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <let><clip pos="1" side="tl" part="cas"/><lit v=""/></let>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu>
              <get-case-from pos="2"><clip pos="1" side="tl" part="lemh"/></get-case-from>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </otherwise>
      </choose>
    </def-macro>

    <def-macro n="out_gen-prep" npar="1"
               c="arg.1: noun. Only acts on genitives. Adds a space after.">
      <choose><when c="gen">
        <test><equal><clip pos="1" side="sl" part="cas"/><lit-tag v="gen"/></equal></test>
        <choose>
          <when c="i">
            <test><in><clip pos="1" side="tl" part="lemh"/><list n="gen-i"/></in></test>
            <choose>
              <when>
                <test><in><clip pos="1" side="tl" part="lemh"/><list n="ind-gen-i"/></in></test>
                <let>
                  <clip pos="1" side="tl" part="tags"/>
                  <concat><clip pos="1" side="tl" part="tags"/><lit-tag v="defdrop"/></concat>
                </let>
              </when>
            </choose>
            <let><var n="gen-prep"/><lit v="i"/></let>
          </when>
          <when c="på">
            <test><in><clip pos="1" side="tl" part="lemh"/><list n="gen-på"/></in></test>
            <choose>
              <when>
                <test><in><clip pos="1" side="tl" part="lemh"/><list n="ind-gen-på"/></in></test>
                <let>
                  <clip pos="1" side="tl" part="tags"/>
                  <concat><clip pos="1" side="tl" part="tags"/><lit-tag v="defdrop"/></concat>
                </let>
              </when>
            </choose>
            <let><var n="gen-prep"/><lit v="på"/></let>
          </when>
          <when c="av">
            <test><in><clip pos="1" side="tl" part="lemh"/><list n="gen-av"/></in></test>
            <let><var n="gen-prep"/><lit v="av"/></let>
          </when>
          <when c="for">
            <test><in><clip pos="1" side="tl" part="lemh"/><list n="gen-for"/></in></test>
            <let><var n="gen-prep"/><lit v="for"/></let>
          </when>
          <otherwise c="til">
            <let><var n="gen-prep"/><lit v="til"/></let>
          </otherwise>
        </choose>
        <out>
          <chunk name="gen-prep">
            <tags><tag><lit-tag v="pr"/></tag></tags>
            <lu>
              <var n="gen-prep"/>
              <lit-tag v="pr"/>
            </lu>
          </chunk>
          <b/>
        </out>
      </when></choose>
    </def-macro>


    <def-macro n="gen2cmp" npar="2"
               c="arg.1: genitive noun
                  arg.2: owned noun">
      <choose><when c="avoid samfunnsverdet, regjeringsverdet, kyrkjeverdet">
        <test><and>
          <equal><clip pos="2" side="tl" part="lemh"/><lit v="verd"/></equal>
          <not><or>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="menneske"/></equal>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="individ"/></equal>
          </or></not>
        </and></test>
        <reject-current-rule shifting="no"/>
      </when></choose>

      <let><var n="c_name"/><lit v="n_n"/></let>
      <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

      <call-macro n="stash_case_in_ntags"><with-param pos="1"/></call-macro>
      <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
      <let><clip pos="1" side="tl" part="art"/><lit-tag v="ind.cmp"/></let>
      <let><clip pos="1" side="tl" part="cas"/><lit v=""/></let>
      <let><clip pos="2" side="tl" part="art"/><lit-tag v="def"/></let>
      <out>
        <chunk namefrom="c_name">
          <tags>
            <tag><clip pos="2" side="tl" part="tags"/></tag>
          </tags>
          <lu><clip pos="1" side="tl" part="whole"/></lu>
          <lu><clip pos="2" side="tl" part="whole"/></lu>
        </chunk>
      </out>
      <choose><when>
        <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
        <out><b pos="1"/></out>
      </when></choose>
    </def-macro>

  </section-def-macros>



  <section-rules>
    <!-- Idiomatic rules first -->
    <rule comment="totalt antall → det samla talet
                   idiomatic rule">
      <pattern>
        <pattern-item n="totalt"/>
        <pattern-item n="antall"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags><tag><lit-tag v="adv"/></tag></tags>
            <lu>
              <lit v="den"/>
              <lit-tag v="det.dem.nt.sg"/>
            </lu>
            <b/>
            <lu>
              <lit v="samle"/>
              <lit-tag v="vblex.pp"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="tal"/>
              <lit-tag v="n.nt.sg.def"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- Verbs -->
    <rule comment="VBLEX.PASV.FV: leses => vert lest
                   beholdes [ikke] => vert [ikkje] haldt på
                   synes => synest

                   TODO: verb probably should lose possible uppercasing,
                   although it's unlikely to find the passive verb in
                   the beginning of a sentence

                   If we translate into a pstv verb, output like the regular VBLEX rule.

                   If we don't see an infinitive marker in t2x, the aux gets
                   deleted again.">
      <pattern>
        <pattern-item n="vblexpassfv"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_lemq"><with-param pos="1"/></call-macro>

        <choose>
          <when>
            <test><equal>
              <clip pos="1" side="tl" part="a_verb"/><lit-tag v="vblex.pstv"/>
            </equal></test>
            <out>
              <chunk name="vblex" case="caseFirstWord">
                <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <clip pos="1" side="tl" part="temps"/>
                  <var n="c_lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <call-macro n="set_aux"><with-param pos="1"/></call-macro>
            <!-- todo: why do I get a bus error when calling set_aux2 here? -->
            <out>
              <chunk name="aux" case="caseFirstWord">
                <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
                <var n="aux"/>
              </chunk>
              <b/>
              <chunk name="adj">
                <tags>
                  <tag><lit-tag v="adj.pp.nt.sg.ind"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <lit-tag v="adj.pp.nt.sg.ind"/>
                  <var n="c_lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
        <out><var n="out_lemq"/></out>
      </action>
    </rule>

    <rule comment="VBLEXPP
                   This rule has to be above the regular vblex rule,
                   override lemq-moving for pp verbs.">
      <pattern>
        <pattern-item n="vblexpp"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="vblex"/></let>
        <choose><when>
          <test><or>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="bli"/></equal>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="vere"/></equal>
          </or></test>
          <let><var n="c_name"/><lit v="aux"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <clip pos="1" side="tl" part="temps"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="VBLEX
                   If we have nn multiwords, these need the lemq after the
                   inflected part. All lemq's include their own initial space.
                   This rule has to be below the passive rule.">
      <pattern>
        <pattern-item n="vblex"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_lemq"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="vblex"/></let>
        <choose><when>
          <test><or>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="bli"/></equal>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="vere"/></equal>
          </or></test>
          <let><var n="c_name"/><lit v="aux"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <clip pos="1" side="tl" part="temps"/>
              <clip pos="1" side="tl" part="voice"/>
              <var n="c_lemq"/>
            </lu>
          </chunk>
        </out>
        <out><var n="out_lemq"/></out>
      </action>
    </rule>

    <rule comment="INFM">
      <pattern>
        <pattern-item n="infm"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="infm" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADV">
      <pattern>
        <pattern-item n="adv"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- POSGEN måte å VBLEXINF -->
    <rule comment="sin N_KEEP_SIN: sin vilje => sin vilje
                   Override the below rule (TODO: use exception tag instead, when accepted to trunk).">
      <pattern>
        <pattern-item n="sin"/>
        <pattern-item n="n_keep_sin"/>
      </pattern>
      <action>
        <out>
          <chunk name="detsin-keep">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="1"/>
          <chunk name="n">
            <tags><tag><clip pos="2" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="sin måte å VBLEXINF: sin måte å referere => sin måte å referere
                   Override the below rule (TODO: use exception tag instead, when accepted to trunk).">
      <pattern>
        <pattern-item n="sin"/>
        <pattern-item n="måte"/>
        <pattern-item n="infm"/>
        <pattern-item n="vblexinf"/>
      </pattern>
      <action>
        <call-macro n="set_lemq"><with-param pos="4"/></call-macro>
        <out>
          <chunk name="detsin">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="1"/>
          <chunk name="n">
            <tags><tag><clip pos="2" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="2"/>
          <chunk name="infm">
            <tags><tag><clip pos="3" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="3"/>
        </out>
        <call-macro n="set_caseFirstWord"><with-param pos="4"/></call-macro>
        <let><var n="c_name"/><lit v="vblex"/></let>
        <choose><when>
          <test><or>
            <equal><clip pos="4" side="tl" part="lemh"/><lit v="bli"/></equal>
            <equal><clip pos="4" side="tl" part="lemh"/><lit v="vere"/></equal>
          </or></test>
          <let><var n="c_name"/><lit v="aux"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="4" side="tl" part="tags"/></tag></tags>
            <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_verb"/>
              <clip pos="4" side="tl" part="temps"/>
              <var n="c_lemq"/>
            </lu>
          </chunk>
        </out>
        <out><var n="out_lemq"/></out>
      </action>
    </rule>

    <rule comment="POSGEN måte å VBLEXINF: hennes måte å sykle => måten ho syklar
                   bokens måte å leses => måten boka vert lesen

Requires rather ugly RL prn lemmas in nn.dix, see personal_pronouns__prn pardef

no lemq-moving">
      <pattern>
        <pattern-item n="posgen"/>
        <pattern-item n="måte"/>
        <pattern-item n="infm"/>
        <pattern-item n="vblexinf_or_infpass"/>
      </pattern>
      <action>
        <call-macro n="switch_cases">
	  <with-param pos="2"/>
	  <with-param pos="1"/>
        </call-macro>
        <call-macro n="out_ndef">
	  <with-param pos="2"/>
	  <with-param pos="1"/>
	</call-macro>
        <out><b pos="1"/></out>
        <call-macro n="out_posgen_subj">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <choose><when>
          <test><not><equal><b pos="2"/><lit v=" "/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
        <choose>
          <when>
            <test>
              <equal><clip pos="4" side="tl" part="voice"/><lit-tag v="pasv"/></equal>
            </test>
            <call-macro n="set_aux2"><with-param pos="4"/><with-param pos="4"/></call-macro>
            <out>
              <chunk name="vblex" case="caseFirstWord">
                <tags><tag><clip pos="4" side="tl" part="tags"/></tag></tags>
                <var n="aux"/>
              </chunk>
              <b pos="3"/>
              <chunk name="vblex" case="caseFirstWord">
                <tags><tag><clip pos="4" side="tl" part="tags"/></tag></tags>
                <lu>
                  <clip pos="4" side="tl" part="lemh"/>
                  <clip pos="4" side="tl" part="a_verb"/>
                  <lit-tag v="pp"/>
                  <clip pos="4" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <b pos="3"/>
              <chunk name="vblex" case="caseFirstWord">
                <tags><tag><clip pos="4" side="tl" part="tags"/></tag></tags>
                <lu>
                  <clip pos="4" side="tl" part="lemh"/>
                  <clip pos="4" side="tl" part="a_verb"/>
                  <lit-tag v="pres"/>
                  <clip pos="4" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <!-- Catch wrong bracketing:  -->
    <rule comment="preadj-ADV ADJIND
                   Ikkje: «altså kvinnelig [vektløfting]»">
      <pattern>
        <pattern-item n="preadj-adv"/>
        <pattern-item n="adjind"/>
      </pattern>
      <action>
        <!-- c_name setting after set_grau_aux since adv first in chunk -->
        <call-macro n="set_gender1.adj"><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <choose>
          <when>
            <test>
              <not><equal><var n="grau_aux"/><lit v=""/></equal></not>
            </test>
            <let><var n="c_name"/><lit v="adv_adj_adj"/></let>
          </when>
          <otherwise>
            <let><var n="c_name"/><lit v="adv_adj"/></let>
          </otherwise>
        </choose>

        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="2" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <b pos="1"/>
            <var n="grau_aux"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- Nouns -->
    <rule comment="NGEN CNJCOO NGEN: lørdagens og søndagens => laurdagens og søndagens">
      <pattern>
        <pattern-item n="ngen"/>
        <pattern-item n="cnjcoo"/>
        <pattern-item n="ngen"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="1"/>
          <chunk name="default" case="caseFirstWord">
            <tags>
              <tag><clip pos="2" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
          <b pos="2"/>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NGEN_TIME_MEAS: dagens => dagens">
      <pattern>
        <pattern-item n="ngen_time_meas"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="timemeas"/></tag>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NGEN_TIME_MEAS: flere års => fleire års">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ngen_time_meas"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="timemeas"/></tag>
              <tag><clip pos="2" side="tl" part="tags"/></tag>
            </tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NGEN NIND_KEEP_GEN_S: barnets beste => barnets beste">
      <pattern>
        <pattern-item n="ngen"/>
        <pattern-item n="nind_keep_gen_s"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="n_n"/></let>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><clip pos="2" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NGEN_TIME_MEAS NIND: dagens vedtak => dagens vedtak">
      <pattern>
        <pattern-item n="ngen_time_meas"/>
        <pattern-item n="nind"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="n_n"/></let>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><clip pos="2" side="tl" part="tags"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NGEN NIND_GEN2CMP: menneskets verdighet → mennesketverdet">
      <pattern>
        <pattern-item n="ngen"/>
        <pattern-item n="nind_gen2cmp"/>
      </pattern>
      <action>
        <call-macro n="gen2cmp"><with-param pos="1"/><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="NGEN_BYPLAN NIND_GEN2CMP_BYPLAN: byens plan → byplanen">
      <pattern>
        <pattern-item n="ngen_byplan"/>
        <pattern-item n="nind_gen2cmp_byplan"/>
      </pattern>
      <action>
        <call-macro n="gen2cmp"><with-param pos="1"/><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <!-- N+ -->
    <rule comment="N
                   Put cas from lu in chunk">
      <pattern>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="1"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NCMP N: ytelse ytelse => ytingsyting
                   Remove the space that pretransfer added">
      <pattern>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="2"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="n_n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NCMP NCMP N: Falk lands krigen => Falklandskrigen">
      <pattern>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <out>
          <chunk name="n_n_n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="NCMP NCMP NCMP N">
      <pattern>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="4"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <out>
          <chunk name="n_n_n_n" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- ADJ N+ -->
    <rule comment="ADJ N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="2" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="2"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="2"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="3" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="4" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="4"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ NCMP NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="5" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_n_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="5"/><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="5"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="5"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu><clip pos="2" side="tl" part="whole"/></lu>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
            <lu><clip pos="5" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- ADJ ADJ N+ -->
    <rule comment="ADJ ADJ N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="3" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_adj_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="3"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="3"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="4" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_adj_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="4"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="4"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="5" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_adj_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="5"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="5"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="5"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="5"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n_n_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
            <lu><clip pos="5" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ NCMP NCMP NCMP N">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="ncmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="6" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_adj_n_n_n_n"/></let>
        <call-macro n="set_gender2.n.adj"><with-param pos="6"/><with-param pos="1"/></call-macro>
        <call-macro n="set_gender2.n.adj"><with-param pos="6"/><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_gen-prep"><with-param pos="6"/></call-macro>
        <call-macro n="stash_case_in_ntags"><with-param pos="6"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj_n_n_n_n"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><var n="ntags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu><clip pos="3" side="tl" part="whole"/></lu>
            <lu><clip pos="4" side="tl" part="whole"/></lu>
            <lu><clip pos="5" side="tl" part="whole"/></lu>
            <lu><clip pos="6" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- ADJ, no noun -->
    <rule comment="ADJ">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <let><var n="c_name"/><lit v="adj"/></let>
        <call-macro n="set_gender1.adj"><with-param pos="1"/></call-macro>
        <call-macro n="set_grau_aux1"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="ADJ ADJ">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="mykje"/></equal></not>
            <equal><clip pos="1" side="tl" part="art"/><lit-tag v="ind"/></equal>
            <equal><clip pos="2" side="tl" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <let><var n="c_name"/><lit v="adj_adj"/></let>
        <call-macro n="set_gender1.adj"><with-param pos="1"/></call-macro>
        <call-macro n="set_gender1.adj"><with-param pos="2"/></call-macro>
        <call-macro n="set_grau_aux2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when>
          <!-- set_grau_aux2 may have removed the first adj: -->
          <test><equal><clip pos="1" side="tl" part="whole"/><lit v=""/></equal></test>
          <let><var n="c_name"/><lit v="adj"/></let>
        </when></choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="2" side="tl" part="tags"/></tag></tags>
            <var n="grau_aux"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="tags"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- Other classes -->
    <rule comment="DET">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose c="set c_name">
          <when>
            <test><equal><clip pos="1" side="tl" part="expl"/><lit-tag v="expl"/></equal></test>
            <let><var n="c_name"/><lit v="detexpl"/></let>
          </when>
          <when>
            <test><in caseless="yes"><clip pos="1" side="sl" part="lem"/><list n="det_indef"/></in></test>
            <let><var n="c_name"/><lit v="detdd"/></let>
          </when>
          <when>
            <test><equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="sin"/></equal></test>
            <let><var n="c_name"/><lit v="detsin"/></let>
          </when>
          <otherwise><let><var n="c_name"/><lit v="det"/></let></otherwise>
        </choose>

        <choose><when c="There are no genitive det's in nn.dix, output prep (most likely changed to 'sin' in t2x)">
          <test><equal><clip pos="1" side="tl" part="cas"/><lit-tag v="gen"/></equal></test>
          <call-macro n="out_gen-prep"><with-param pos="1"/></call-macro>
          <let><clip pos="1" side="tl" part="cas"/><lit v=""/></let>
        </when></choose>

        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="PRN">
      <pattern>
        <pattern-item n="prn"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="prn" case="caseFirstWord">
            <tags><tag><clip pos="1" side="tl" part="tags"/></tag></tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="PR">
      <pattern>
        <pattern-item n="pr"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let>
          <var n="c_lemtag"/>
          <concat><lit v="&lt;"/><clip pos="1" side="tl" part="lemh"/><lit v="&gt;"/></concat>
        </let>
        <out>
          <chunk name="pr" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="tl" part="tags"/></tag>
              <tag><var n="c_lemtag"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="whole"/></lu>
          </chunk>
        </out>
      </action>
    </rule>

  </section-rules>
</transfer>
