#!/bin/bash

# shellcheck disable=SC2312

outdir=nobackup/genitive-prepositions
mkdir -p "${outdir}"

sed 's/ -t / /g; s/cg-proc *-w /cg-proc /g' modes/nno-nob-disam.mode > modes/nno-nob-disam-notrace.mode
sed 's/ -t / /g; s/cg-proc *-w /cg-proc /g' modes/nob-nno-disam.mode > modes/nob-nno-disam-notrace.mode

echo "${outdir}"/nno.disam
nnols () { xzcat  corpus/nno/*xz | wc -l; }
test -f "${outdir}"/nno.disam ||
    xzcat  corpus/nno/*xz              \
        | apertium -d . nno-nob-disam-notrace \
        | pv -ls "$(nnols)"                   \
             >"${outdir}"/nno.disam

onlyNounsMainPos () {
    # Keep only the noun readings, drop non-head compound parts, drop inflection tags, keep only one of ambiguous readings
    sed 's,/[^$/]*+,/,g'                                                               \
  | sed -E 's,/[^/+$]*<(adj|vblex|adv|pr|ij|cnjsub|cnjcoo|np|det|xpst[so]?)>[^/$]*,,g' \
  | sed 's,\^[^$]*/,,g'                                                                \
  | sed 's/<\(sg\|pl\|sp\|def\|ind\|gen\)>//g'                                         \
  | tr -d '$'
}

echo "${outdir}"/nno.sgen
test -f "${outdir}"/nno.sgen ||
    <"${outdir}"/nno.disam                                 \
    grep '/[^</$]*<n>[^/$]*<gen>[$] \^[^$]*<n>[^$]*[$]' -o \
    | grep -v '<cmp[^>]'                                   \
    | grep -v 'alphabet<'                                  \
    | onlyNounsMainPos                                     \
    | tr -d /                                              \
      > "${outdir}"/nno.sgen                               \

echo "${outdir}"/nob.disam
nobls () { xzcat  corpus/nob/*xz | wc -l; }
test -f "${outdir}"/nob.disam ||
    xzcat  corpus/nob/*xz              \
        | apertium -d . nob-nno-disam-notrace \
        | pv -ls "$(nobls)"                   \
        >"${outdir}"/nob.disam

echo "${outdir}"/nob2nno.sgen
test -f "${outdir}"/nob2nno.sgen ||
    <"${outdir}"/nob.disam                                                                                     \
    grep '/[^</$]*<n>[^/$]*<gen>[$] \^[^$]*<n>[^$]*[$]' -o                                                     \
    | sed 's,/[^$]*+,/,g;s,\^[^/]*,,;s,/[^$]*/,/,g;s/<\(sg\|pl\|sp\|def\|ind\|gen\)>//g'                       \
    | tr -d '/$'                                                                                               \
    | tee "${outdir}"/nob.sgen_n                                                                               \
    | sed 's/[0-9]*-\(åring\|tall\|år\)</1-\1</'                                                               \
    | sed 's,^,^,;s, ,<sg><ind>$ ^,;s,$,<sg><ind>$,'                                                           \
    | lt-proc -b nob-nno.autobil.bin                                                                           \
    | sed 's/<sg><ind>//g;s,\^[^/]*/,^,g'                                                                      \
    | awk -F'\\^|\\$' '# Expand all combinations of possible bidix ambiguity:
        {nh=split($2,ah,"/"); no=split($4,ao,"/");for(i=1;i<=nh;i++)for(j=1;j<=no;j++)print ah[i]" "ao[j]}' \
          >"${outdir}"/nob2nno.sgen

echo "${outdir}"/nno.prep3g
test -f "${outdir}"/nno.prep3g ||
    <"${outdir}"/nno.disam                                                                        \
    grep -o '\^[^$]*<n>[^$/]*<def>[$] [^$]*/[a-zæøå]*<pr>[^$]*[$] [^$]*<n>[^$]*[$]'               \
    | grep -Ee '<pr>.*(kvinne|mann|herre|jente|gut|dame)<n>' -e '<pr>.*<n>[^$/]*<def>[^$/+]*[$/]' \
    | sed 's,\^[^$]*/\([^<]*<pr>\)[^$]*[$],\1,'                                                   \
    | onlyNounsMainPos                                                                            \
         >"${outdir}"/nno.prep3g
# The kvinne|mann|… is from <def-list n="bi-indgen-owner">

# TODO: inner join this one with nob2nno.sgen too
echo "${outdir}"/nno.noprepdag
test -f "${outdir}"/nno.noprepdag ||
    <"${outdir}"/nno.disam                                                                                    \
     grep -o '\^[^$]*<n>[^$/]*<def>[$] [^$]*\(laur\|søn\|sun\|mån\|man\|tys\|tirs\|ons\|fre\)dag<n>[^$/]*[$]' \
        | sed 's,\^[^$]*[/+],,g;'                                                                             \
        | sed 's/<\(sg\|pl\|sp\|def\|ind\|cmp-split\|gen\)>//g'                                               \
        | tr -d '$'                                                                                           \
             >"${outdir}"/nno.noprepdag

<"${outdir}"/nno.prep3g                         \
 gawk -v nob2nnosgenf="${outdir}"/nob2nno.sgen  \
      -v nnosgenf="${outdir}"/nno.sgen          \
 -f "$(dirname "$0")"/genitive-prepositions.awk \
    | tee "${outdir}"/out







dedupe_bi_gen () {
    # Helper to remove useless bigram entries (where unigram entries would pick the head anyway).
    # NB. Runs through the file twice, first to collect unigram entries, then to drop useless bigrams (and keep the rest).
    # Idempotent.
    awk '
/^ *<def-list n="/ { name=$0; sub(/.*<def-list n="/,"",name); sub(/".*/,"",name) }
/<\/def-list/ { name = uniname = "" }
/<list-item v="/{item=$0;sub(/.*v="/,"",item);sub(/".*/,"",item)}

# We are on the first run, store unigram entries:
NR==FNR && name && /<list-item/ {uni[name][item]++}

# We are on the second run, skip bigram entries where the head is in a unigram entry:
NR>FNR && /<def-list n="bi-/ { uniname=name; sub(/bi-/,"",uniname); }
NR>FNR && uniname && /<list-item/ { head=item; sub(/.*_/,"",head); if(uniname in uni && head in uni[uniname]) next }
NR>FNR { print }' \
        apertium-nno-nob.nob-nno.t1x \
        apertium-nno-nob.nob-nno.t1x
}
