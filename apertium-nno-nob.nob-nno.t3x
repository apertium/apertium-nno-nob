<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- nxml -*- -->

<!--
    Postchunk matches on names, which signify the number of LU's in the chunk.

    TODO: prenom the adj_cnjcoo_adj_n chunks as well
-->

<postchunk>
  <section-def-cats>
    <def-cat n="n">
      <cat-item name="nn"/>
    </def-cat>
    <def-cat n="prenom_n">
      <cat-item name="n_n"/>    <!-- Sogn tingrett -->
      <cat-item name="cmp_n"/>  <!-- kaffetingrett -->
      <cat-item name="adj_n"/>
    </def-cat>
    <def-cat n="prenom_prenom_n">
      <cat-item name="cmp_cmp_n"/>
      <cat-item name="cmp_adj_n"/>
      <cat-item name="adj_cmp_n"/>
      <cat-item name="adj_adj_n"/>
    </def-cat>
    <def-cat n="prenom_prenom_prenom_n">
      <cat-item name="cmp_cmp_cmp_n"/>
      <cat-item name="cmp_cmp_adj_n"/>
      <cat-item name="cmp_adj_cmp_n"/>
      <cat-item name="cmp_adj_adj_n"/>
      <cat-item name="adj_cmp_cmp_n"/>
      <cat-item name="adj_cmp_adj_n"/>
      <cat-item name="adj_adj_cmp_n"/>
      <cat-item name="adj_adj_adj_n"/>
    </def-cat>
    <def-cat n="prenom_prenom_prenom_prenom_n">
      <cat-item name="cmp_cmp_cmp_cmp_n"/>
      <cat-item name="cmp_cmp_cmp_adj_n"/>
      <cat-item name="cmp_cmp_adj_cmp_n"/>
      <cat-item name="cmp_cmp_adj_adj_n"/>
      <cat-item name="cmp_adj_cmp_cmp_n"/>
      <cat-item name="cmp_adj_cmp_adj_n"/>
      <cat-item name="cmp_adj_adj_cmp_n"/>
      <cat-item name="cmp_adj_adj_adj_n"/>
      <cat-item name="adj_cmp_cmp_cmp_n"/>
      <cat-item name="adj_cmp_cmp_adj_n"/>
      <cat-item name="adj_cmp_adj_cmp_n"/>
      <cat-item name="adj_cmp_adj_adj_n"/>
      <cat-item name="adj_adj_cmp_cmp_n"/>
      <cat-item name="adj_adj_cmp_adj_n"/>
      <cat-item name="adj_adj_adj_cmp_n"/>
      <cat-item name="adj_adj_adj_adj_n"/>
    </def-cat>
    <def-cat n="prenom_prenom_prenom_prenom_prenom_n">
      <cat-item name="cmp_cmp_cmp_cmp_cmp_n"/>
      <cat-item name="cmp_cmp_cmp_cmp_adj_n"/>
      <cat-item name="cmp_cmp_cmp_adj_cmp_n"/>
      <cat-item name="cmp_cmp_cmp_adj_adj_n"/>
      <cat-item name="cmp_cmp_adj_cmp_cmp_n"/>
      <cat-item name="cmp_cmp_adj_cmp_adj_n"/>
      <cat-item name="cmp_cmp_adj_adj_cmp_n"/>
      <cat-item name="cmp_cmp_adj_adj_adj_n"/>
      <cat-item name="cmp_adj_cmp_cmp_cmp_n"/>
      <cat-item name="cmp_adj_cmp_cmp_adj_n"/>
      <cat-item name="cmp_adj_cmp_adj_cmp_n"/>
      <cat-item name="cmp_adj_cmp_adj_adj_n"/>
      <cat-item name="cmp_adj_adj_cmp_cmp_n"/>
      <cat-item name="cmp_adj_adj_cmp_adj_n"/>
      <cat-item name="cmp_adj_adj_adj_cmp_n"/>
      <cat-item name="cmp_adj_adj_adj_adj_n"/>
      <cat-item name="adj_cmp_cmp_cmp_cmp_n"/>
      <cat-item name="adj_cmp_cmp_cmp_adj_n"/>
      <cat-item name="adj_cmp_cmp_adj_cmp_n"/>
      <cat-item name="adj_cmp_cmp_adj_adj_n"/>
      <cat-item name="adj_cmp_adj_cmp_cmp_n"/>
      <cat-item name="adj_cmp_adj_cmp_adj_n"/>
      <cat-item name="adj_cmp_adj_adj_cmp_n"/>
      <cat-item name="adj_cmp_adj_adj_adj_n"/>
      <cat-item name="adj_adj_cmp_cmp_cmp_n"/>
      <cat-item name="adj_adj_cmp_cmp_adj_n"/>
      <cat-item name="adj_adj_cmp_adj_cmp_n"/>
      <cat-item name="adj_adj_cmp_adj_adj_n"/>
      <cat-item name="adj_adj_adj_cmp_cmp_n"/>
      <cat-item name="adj_adj_adj_cmp_adj_n"/>
      <cat-item name="adj_adj_adj_adj_cmp_n"/>
      <cat-item name="adj_adj_adj_adj_adj_n"/>
    </def-cat>
    <def-cat n="adj2vblex">
      <cat-item name="adj2vblex"/>
    </def-cat>
    <def-cat n="cmp_adj2vblex">
      <cat-item name="cmp_adj2vblex"/>
    </def-cat>
    <def-cat n="cmp_cmp_adj2vblex">
      <cat-item name="cmp_cmp_adj2vblex"/>
    </def-cat>
    <def-cat n="cmp_cmp_cmp_adj2vblex">
      <cat-item name="cmp_cmp_cmp_adj2vblex"/>
    </def-cat>
    <def-cat n="cmp_cmp_cmp_cmp_adj2vblex">
      <cat-item name="cmp_cmp_cmp_cmp_adj2vblex"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item name="adj"/>
    </def-cat>
    <def-cat n="det2adj">
      <cat-item name="det2adj"/>
    </def-cat>
    <!-- N og N: -->
    <def-cat n="n_cnjcoo_n">
      <cat-item name="n_cnjcoo_n"/>
    </def-cat>
    <def-cat n="n_cnjcoo_prenom_n">
      <cat-item name="n_cnjcoo_cmp_n"/>
      <cat-item name="n_cnjcoo_adj_n"/>
    </def-cat>
    <def-cat n="prenom_n_cnjcoo_n">
      <cat-item name="cmp_n_cnjcoo_n"/>
      <cat-item name="adj_n_cnjcoo_n"/>
    </def-cat>
    <def-cat n="prenom_n_cnjcoo_prenom_n">
      <cat-item name="cmp_n_cnjcoo_cmp_n"/>
      <cat-item name="cmp_n_cnjcoo_adj_n"/>
      <cat-item name="adj_n_cnjcoo_cmp_n"/>
      <cat-item name="adj_n_cnjcoo_adj_n"/>
    </def-cat>
    <def-cat n="prenom_prenom_n_cnjcoo_n">
      <cat-item name="cmp_cmp_n_cnjcoo_n"/>
      <cat-item name="cmp_adj_n_cnjcoo_n"/>
      <cat-item name="adj_cmp_n_cnjcoo_n"/>
      <cat-item name="adj_adj_n_cnjcoo_n"/>
    </def-cat>
    <def-cat n="prenom_prenom_prenom_n_cnjcoo_n">
      <cat-item name="cmp_cmp_cmp_n_cnjcoo_n"/>
      <cat-item name="cmp_cmp_adj_n_cnjcoo_n"/>
      <cat-item name="cmp_adj_cmp_n_cnjcoo_n"/>
      <cat-item name="cmp_adj_adj_n_cnjcoo_n"/>
      <cat-item name="adj_cmp_cmp_n_cnjcoo_n"/>
      <cat-item name="adj_cmp_adj_n_cnjcoo_n"/>
      <cat-item name="adj_adj_cmp_n_cnjcoo_n"/>
      <cat-item name="adj_adj_adj_n_cnjcoo_n"/>
    </def-cat>
    <def-cat n="n_cnjcoo_det_prenom_n">
      <cat-item name="n_cnjcoo_det_adj_n"/>
      <cat-item name="n_cnjcoo_det_cmp_n"/>
    </def-cat>
    <!-- ADJ og ADJ N -->
    <def-cat n="adj_cnjcoo_adj_n">
      <cat-item name="adj_cnjcoo_adj_n"/>
    </def-cat>
    <def-cat n="adj_cnjcoo_adj_adj_n">
      <cat-item name="adj_cnjcoo_adj_adj_n"/>
    </def-cat>
    <def-cat n="adj_cnjcoo_n_adj_n">
      <cat-item name="adj_cnjcoo_n_adj_n"/>
    </def-cat>
    <def-cat n="adj_cnjcoo_cmp_adj_n">
      <cat-item name="adj_cnjcoo_cmp_adj_n"/>
    </def-cat>
    <def-cat n="adj_cnjcoo_adj_cmp_n">
      <cat-item name="adj_cnjcoo_adj_cmp_n"/>
    </def-cat>
    <def-cat n="cmp_adj_cnjcoo_adj_cmp_n">
      <cat-item name="cmp_adj_cnjcoo_adj_cmp_n"/>
    </def-cat>
    <!-- ADJ ADJ N+ -->
    <def-cat n="adj_cm_adj_n">
      <cat-item name="adj_cm_adj_n"/>
    </def-cat>
    <!-- ADJ ADJ ADJ N+ -->
    <def-cat n="adj_adj_adj_cmp_cmp_cmp_n">
      <cat-item name="adj_adj_adj_cmp_cmp_cmp_n"/>
    </def-cat>
    <!-- NCMP+ ADJ N+ -->
    <!-- others -->
    <def-cat n="det">
      <cat-item name="det"/>
      <cat-item name="detdd"/>
      <cat-item name="detsin"/>
      <cat-item name="detpos-keep"/>
    </def-cat>
    <def-cat n="detsin">
      <cat-item name="detsin"/>
    </def-cat>
    <def-cat n="prn">
      <cat-item name="prn"/>
    </def-cat>
    <def-cat n="vblex">
      <cat-item name="vblex"/>
    </def-cat>
  </section-def-cats>


  <section-def-attrs>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
      <attr-item tags="adj.ord"/>
      <attr-item tags="adj.sint"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="pst"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
    </def-attr>
    <def-attr n="xgrau">
      <attr-item tags="xpst"/>
      <attr-item tags="xpsts"/>
      <attr-item tags="xpsto"/>
      <attr-item tags="xcomp"/>
      <attr-item tags="xsup"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="f"/>
      <attr-item tags="un"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
    </def-attr>
    <def-attr n="cas">
      <attr-item tags="nom"/>
      <attr-item tags="gen"/>
      <attr-item tags="acc"/>
      <attr-item tags="CD"/>
    </def-attr>
    <def-attr n="a_casedrop" c="Mark that we'd like to drop gen-case in t3x">
      <attr-item tags="casedrop"/>
    </def-attr>
    <def-attr n="a_defdrop" c="Mark that we'd like to change defnes to ind in t3x">
      <attr-item tags="defdrop"/>
      <attr-item tags="gendefdrop"/> <!-- the object would like to drop the genitive's defnes -->
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
      <attr-item tags="vblex.pstv"/>
    </def-attr>
    <def-attr n="a_movable">
      <attr-item tags="np-movable"/>
    </def-attr>
    <def-attr n="a_cmp">
      <attr-item tags="cmp"/>
      <attr-item tags="cmp-split"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="inf"/>
      <attr-item tags="imp"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="pp"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="a_chunknum">
      <attr-item tags="chunknum"/>
    </def-attr>
    <def-attr n="a_po_sin">
      <attr-item tags="po_sin"/>
    </def-attr>
    <def-attr n="gen_prep_override">
      <attr-item tags="pr_til"/>
      <attr-item tags="pr_av"/>
      <attr-item tags="pr_blant"/>
      <attr-item tags="pr_etter"/>
      <attr-item tags="pr_for"/>
      <attr-item tags="pr_frå"/>
      <attr-item tags="pr_før"/>
      <attr-item tags="pr_gjennom"/>
      <attr-item tags="pr_hos"/>
      <attr-item tags="pr_i"/>
      <attr-item tags="pr_med"/>
      <attr-item tags="pr_mellom"/>
      <attr-item tags="pr_mot"/>
      <attr-item tags="pr_om"/>
      <attr-item tags="pr_over"/>
      <attr-item tags="pr_per"/>
      <attr-item tags="pr_på"/>
      <attr-item tags="pr_rundt"/>
      <attr-item tags="pr_som"/>
      <attr-item tags="pr_uansett"/>
      <attr-item tags="pr_under"/>
      <attr-item tags="pr_unna"/>
      <attr-item tags="pr_ut"/>
      <attr-item tags="pr_ved"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="space" v=" "/>  <!-- TODO: v attribute doesn't seem to have any effect, have to let-bind it -->
    <def-var n="n_cleaned" v="false"/>
  </section-def-vars>

  <section-def-lists>
    <def-list n="adj-ind-def" c="Allow ind adj followed by def noun for these adv-like adjectives (tl/nno)">
      <list-item v="mykje"/>
      <list-item v="mellombels"/>
      <list-item v="suverent"/>
      <list-item v="verkeleg"/>
    </def-list>
    <def-list n="n-keep-pl.ind" c="Don't change ind→def on these nouns if pl, even if preceding adj gets def (tl/nno)">
      <list-item v="par"/>      <!-- de siste par timene -->
      <list-item v="tusen"/>    <!-- de flere tusen ansatte -->
      <list-item v="juletid"/>
      <list-item v="pandemitid"/>
      <list-item v="koronatid"/>
      <list-item v="påsketid"/>
      <list-item v="breiddegrad"/>
      <list-item v="tid"/>
      <list-item v="dag"/>
      <list-item v="intensjon"/> <!-- dei beste intensjonar -->
    </def-list>
    <def-list n="n-keep-sg.ind" c="Don't change ind→def on these familiar nouns if sg, even if preceding adj gets def (tl/nno)">
      <list-item v="mor"/>
      <list-item v="oldemor"/>
      <list-item v="tippoldemor"/>
      <list-item v="tipptippoldemor"/>
      <list-item v="svigermor"/>
      <list-item v="vermor"/>
      <list-item v="far"/>
      <list-item v="oldefar"/>
      <list-item v="tippoldefar"/>
      <list-item v="tipptippoldefar"/>
      <list-item v="svigerfar"/>
      <list-item v="verfar"/>
      <list-item v="søster"/>
      <list-item v="bror"/>
      <list-item v="versøster"/>
      <list-item v="verbror"/>
      <list-item v="svigersøster"/>
      <list-item v="svigerbror"/>
      <!-- <list-item v="tante"/> -->
      <!-- <list-item v="onkel"/> -->
      <list-item v="dotter"/>
      <list-item v="dotterdotter"/>
      <list-item v="svigerdotter"/>
      <list-item v="son"/>
      <list-item v="soneson"/>
      <list-item v="svigerson"/>
      <list-item v="bestemor"/>
      <list-item v="bestefar"/>
      <list-item v="stemor"/>
      <list-item v="stefar"/>
      <list-item v="stedotter"/>
      <list-item v="steson"/>
      <list-item v="morbror"/>
      <list-item v="farbror"/>
      <list-item v="moster"/>
      <list-item v="faster"/>
      <list-item v="halvsøster"/>
      <list-item v="halvbror"/>
      <list-item v="garde"/>
      <list-item v="uhumske"/>
    </def-list>
    <def-list n="n-keep-sg.ind.pr" c="Don't change ind→def on these nouns if sg AND prepositional rewrite
                                      Only regards lone occurrences; we still do def after adj.def or before possessives
                                      - avisens spørsmål → spørsmål frå avisa
                                      - avisens fine spørsmål → det fine spørsmålet frå avisa (has adj.def before)
                                      - hennes spørsmål → spørsmålet hennar (no prepositional rewrite)
                                      ">
      <list-item v="spørsmål"/>
      <list-item v="talsperson"/>
      <list-item v="talsmann"/>
      <list-item v="talskvinne"/>
      <list-item v="favør"/>
      <list-item v="disfavør"/>
      <list-item v="stengetid"/>
    </def-list>
    <def-list n="dem_sg_genders">
      <list-item v="&lt;m&gt;"/>
      <list-item v="&lt;f&gt;"/>
      <list-item v="&lt;nt&gt;"/>
    </def-list>
    <def-list n="months">
      <list-item v="januar"/>
      <list-item v="februar"/>
      <list-item v="mars"/>
      <list-item v="april"/>
      <list-item v="mai"/>
      <list-item v="juni"/>
      <list-item v="juli"/>
      <list-item v="august"/>
      <list-item v="september"/>
      <list-item v="oktober"/>
      <list-item v="november"/>
      <list-item v="desember"/>
    </def-list>
    <def-list n="bi-no-double-defnes-adj">
      <list-item v="liten"/>    <!-- det minste bevis -->
    </def-list>
    <def-list n="bi-no-double-defnes-n">
      <list-item v="bevis"/>
    </def-list>
    <def-list n="no-samsvar" c="avoid «gåtte» etc.">
      <list-item v="unngå"/>
      <list-item v="gå"/>
      <list-item v="få"/>
      <list-item v="gi"/>
      <list-item v="gje"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>
    <def-macro n="out_adj" npar="2"
               c="arg.1: adjective
                  arg.2: chunk
                  If we have a pp adj (verb used as adj), the lemq is a particle
                  which should be output before the adj, with no intervening space.">

      <let><clip pos="2" part="a_movable"/><lit v=""/></let> <!-- cleanup adj2vblex -->
      <choose><when c="For passives, apply no-samsvar to both gender and number
                       TODO: why only to number for the others?">
        <test><and>
          <ends-with><clip pos="2" part="lem"/><lit v="adj2vblex"/></ends-with>
          <not><in><clip pos="1" part="lem"/><list n="no-samsvar"/></in></not>
        </and></test>
        <let><clip pos="1" part="tags"/><clip pos="0" part="tags"/></let>
      </when></choose>

      <choose><when c="enhver aksjon er udiskutabel → alle aksjonar er udiskutable">
        <test><equal><clip pos="2" part="a_chunknum"/><lit-tag v="chunknum"/></equal></test>
        <let><clip pos="1" part="a_chunknum"/><lit v=""/></let>
        <choose><when>
          <test><not><in><clip pos="1" part="lem"/><list n="no-samsvar"/></in></not></test>
          <let><clip pos="1" part="nbr"/><clip pos="2" part="nbr"/></let>
        </when></choose>
      </when></choose>

      <choose>
        <when>
          <test><equal><clip pos="1" part="nbr"/><lit-tag v="pl"/></equal></test>
          <choose>
            <when>
              <test><equal><clip pos="1" part="temps"/><lit-tag v="pp"/></equal></test>
              <let><clip pos="1" part="gen"/><lit v=""/></let>
              <let><clip pos="1" part="art"/><lit v=""/></let>
            </when>
            <otherwise>
              <let><clip pos="1" part="gen"/><lit-tag v="un"/></let>
              <let><clip pos="1" part="art"/><lit-tag v="ind"/></let>
            </otherwise>
          </choose>
        </when>
      </choose>

      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
          <equal><clip pos="1" part="art"/><lit v=""/></equal>
        </and></test>
        <let><clip pos="1" part="nbr"/><concat><clip pos="1" part="nbr"/><lit-tag v="def"/></concat></let>
        <let><clip pos="1" part="gen"/><concat><lit v=""/></concat></let>
      </when></choose>

      <out><lu><clip pos="1" part="whole"/></lu></out>
      <!-- This needs much more extensive testing: -->
      <!-- <choose> -->
      <!--   <when> -->
      <!--     <test><equal><clip pos="1" part="temps"/><lit-tag v="pp"/></equal></test> -->
      <!--     <out> -->
      <!--       <lu><clip pos="1" part="lemq"/></lu> -->
      <!--       <lu><clip pos="1" part="lemh"/><clip pos="1" part="tags"/></lu> -->
      <!--     </out> -->
      <!--   </when> -->
      <!--   <otherwise> -->
      <!--     <out><lu><clip pos="1" part="whole"/></lu></out> -->
      <!--   </otherwise> -->
      <!-- </choose> -->
    </def-macro>

    <def-macro n="apply_casedrop_defdrop" npar="2"
               c="arg.1: noun, arg.2: chunk.">
      <choose><when c="DEFDROP">
        <test><equal><clip pos="2" part="a_defdrop"/><lit-tag v="defdrop"/></equal></test>
        <let><clip pos="1" part="art"/><lit-tag v="ind"/></let>
      </when></choose>
      <choose><when c="CASEDROP">
        <test><equal><clip pos="2" part="a_casedrop"/><lit-tag v="casedrop"/></equal></test>
        <let><clip pos="1" part="cas"/><lit v=""/></let>
        <choose c="genitive nominalisations of adj's">
          <when>
            <test><equal><clip pos="1" part="xgrau"/><lit-tag v="xpst"/></equal></test>
            <let><clip pos="1" part="tags"/><lit-tag v="adj.pst.un.sp.def"/></let>
          </when>
          <when>
            <test><equal><clip pos="1" part="xgrau"/><lit-tag v="xpsto"/></equal></test>
            <let><clip pos="1" part="tags"/><lit-tag v="adj.ord.pst.un.sp.def"/></let>
          </when>
          <when>
            <test><equal><clip pos="1" part="xgrau"/><lit-tag v="xpsts"/></equal></test>
            <let><clip pos="1" part="tags"/><lit-tag v="adj.sint.pst.un.sp.def"/></let>
          </when>
          <when>
            <test><equal><clip pos="1" part="xgrau"/><lit-tag v="xcomp"/></equal></test>
            <let><clip pos="1" part="tags"/><lit-tag v="adj.sint.comp.un.sp"/></let>
          </when>
          <when>
            <test><equal><clip pos="1" part="xgrau"/><lit-tag v="xsup"/></equal></test>
            <let><clip pos="1" part="tags"/><lit-tag v="adj.sint.sup.un.sp.def"/></let>
          </when>
        </choose>
      </when></choose>
    </def-macro>


    <def-macro n="clean_n" npar="2"
               c="arg.1: noun, arg.2: chunk.
                  Nouns typically get chunk defnes.
                  Important: set n_cleaned at start of rules/macros calling this macro!">
      <choose><when c="Don't run this macro if n has already been cleaned wrt. adj">
        <test><equal><var n="n_cleaned"/><lit v="false"/></equal></test>

        <choose><when>
          <test><and>
            <not><equal><clip pos="2" part="art"/><lit v=""/></equal></not>
            <not><equal><clip pos="1" part="a_cmp"/><lit-tag v="cmp-split"/></equal></not>
            <not><and>
              <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
              <or>
                <in caseless="yes"><clip pos="1" part="lemh"/><list n="n-keep-sg.ind"/></in>
                <and>
                  <in caseless="yes"><clip pos="1" part="lemh"/><list n="n-keep-sg.ind.pr"/></in>
                  <not><equal><clip pos="2" part="gen_prep_override"/><lit v=""/></equal></not>
                </and>
              </or>
            </and></not>
            <not><and>
              <equal><clip pos="1" part="nbr"/><lit-tag v="pl"/></equal>
              <in caseless="yes"><clip pos="1" part="lemh"/><list n="n-keep-pl.ind"/></in>
            </and></not>
          </and></test>
          <let><clip pos="1" part="art"/><clip pos="2" part="art"/></let>
        </when></choose>
        <choose><when c="force indefinite before 'sin' on n-keep-sg.ind">
          <test><and>
            <equal><clip pos="2" part="a_po_sin"/><lit-tag v="po_sin"/></equal>
            <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
            <in caseless="yes"><clip pos="1" part="lemh"/><list n="n-keep-sg.ind"/></in>
          </and></test>
          <let><clip pos="1" part="art"/><lit-tag v="ind"/></let>
        </when></choose>

        <choose><when c="som en hvilken som helst annen sak → som alle andre saker">
          <test><equal><clip pos="2" part="a_chunknum"/><lit-tag v="chunknum"/></equal></test>
          <let><clip pos="1" part="a_chunknum"/><lit v=""/></let>
          <let><clip pos="1" part="nbr"/><clip pos="2" part="nbr"/></let>
        </when></choose>
        <call-macro n="apply_casedrop_defdrop"><with-param pos="1"/><with-param pos="2"/></call-macro>

      </when></choose>
    </def-macro>

    <def-macro n="clean_n.adj" npar="3"
               c="arg.1: noun, arg.2: adjective, arg.3: chunk.
                  Nouns typically get chunk defnes.
                  Does *not* alter adjective definiteness (so directly usable on non-final adj's)">
      <call-macro n="apply_casedrop_defdrop"><with-param pos="1"/><with-param pos="3"/></call-macro>
      <choose><when c="enhver ny utsettelse → alle nye utsettelser">
        <test><equal><clip pos="3" part="a_chunknum"/><lit-tag v="chunknum"/></equal></test>
        <let><clip pos="1" part="a_chunknum"/><lit v=""/></let>
        <let><clip pos="1" part="nbr"/><clip pos="3" part="nbr"/></let>
        <let><clip pos="2" part="nbr"/><clip pos="3" part="nbr"/></let>
      </when></choose>
      <choose><when c="noun gets chunk defnes">
        <test><and>
          <not><equal><clip pos="3" part="art"/><lit v=""/></equal></not>
          <not><equal><clip pos="1" part="a_cmp"/><lit-tag v="cmp-split"/></equal></not>
          <not><and>
            <equal><clip pos="2" part="nbr"/><lit-tag v="sg"/></equal>
            <equal><clip pos="1" part="art"/><lit v=""/></equal>
          </and></not>
          <not><and>
            <in><clip pos="1" part="lemh"/><list n="months"/></in>
            <equal><clip pos="2" part="a_adj"/><lit-tag v="adj.ord"/></equal>
          </and></not>
          <not><and>
            <in><clip pos="1" part="lemh"/><list n="bi-no-double-defnes-n"/></in>
            <in><clip pos="2" part="lemh"/><list n="bi-no-double-defnes-adj"/></in>
          </and></not>
          <not><and>
            <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
            <in caseless="yes"><clip pos="1" part="lemh"/><list n="n-keep-sg.ind"/></in>
            <!-- TODO: vil me ha «deres gamle sønn → den gamle son deira»? Viss ikkje, sjekk at adj.art=ind: -->
            <!-- <equal><clip pos="2" part="art"/><lit-tag v="ind"/></equal> -->
          </and></not>
          <not><and>
            <equal><clip pos="1" part="nbr"/><lit-tag v="pl"/></equal>
            <in caseless="yes"><clip pos="1" part="lemh"/><list n="n-keep-pl.ind"/></in>
          </and></not>
        </and></test>
        <let><clip pos="1" part="art"/><clip pos="3" part="art"/></let>
      </when></choose>

      <choose><when>
        <test><and>
          <equal><clip pos="2" part="nbr"/><lit-tag v="pl"/></equal>
          <equal><clip pos="2" part="art"/><lit-tag v="def"/></equal>
        </and></test>
        <let><clip pos="2" part="nbr"/><lit-tag v="sp"/></let>
      </when></choose>

      <choose><when c="adj is def, fix adj tags">
        <test><equal><clip pos="2" part="art"/><lit-tag v="def"/></equal></test>
        <choose>
          <when c="pp: always sg and no gender when def">
            <test><equal><clip pos="2" part="temps"/><lit-tag v="pp"/></equal></test>
            <let><clip pos="2" part="gen"/><lit v=""/></let>
            <let><clip pos="2" part="nbr"/><lit-tag v="sg"/></let>
          </when>
          <otherwise c="pst/sup: always sp and un when def">
            <let><clip pos="2" part="gen"/><lit-tag v="un"/></let>
            <let><clip pos="2" part="nbr"/><lit-tag v="sp"/></let>
          </otherwise>
        </choose>
      </when></choose>
      <let><var n="n_cleaned"/><lit v="true"/></let>
    </def-macro>

    <def-macro n="apply_chunk_defnes_to_adj" npar="2"
               c="arg.1: adjective, arg.2: chunk.
                  Allow adjectives to turn definite (from chunk defnes), but not indefinite.">
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="a_cmp"/><lit v=""/></equal>            <!-- is not cmp, but -->
          <not><equal><clip pos="1" part="a_adj"/><lit v=""/></equal></not> <!-- is an adjective-->
          <equal><clip pos="1" part="art"/><lit-tag v="ind"/></equal>
          <equal><clip pos="2" part="art"/><lit-tag v="def"/></equal>
          <!-- avoid 'den meste viktige tingen' / 'dei mellombelse
               tilsette': -->
          <not><in><clip pos="1" part="lemh"/><list n="adj-ind-def"/></in></not>
        </and></test>
        <let><clip pos="1" part="art"/><clip pos="2" part="art"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="clean_n.adj_defnes" npar="3"
               c="arg.1: noun, arg.2: adjective, arg.3: chunk.
                  Nouns typically get chunk defnes.
                  Allow adjectives to turn definite (from chunk defnes), but not indefinite.">
      <call-macro n="apply_chunk_defnes_to_adj"><with-param pos="2"/><with-param pos="3"/></call-macro>
      <call-macro n="clean_n.adj"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
    </def-macro>

    <def-macro n="clean_det" npar="2"
               c="arg.1: determiner, arg.2: chunk">
      <let><clip pos="1" part="nbr"/><clip pos="2" part="nbr"/></let>
      <choose><when>
        <test><not><equal><clip pos="1" part="gen"/><lit-tag v="un"/></equal></not></test>
        <let><clip pos="1" part="gen"/><clip pos="2" part="gen"/></let>
      </when></choose>
      <choose><when>
        <test><or>
          <equal><clip pos="1" part="gen"/><lit-tag v="GD"/></equal>
          <equal><clip pos="1" part="gen"/><lit-tag v="mf"/></equal>
        </or></test>
        <let><clip pos="1" part="gen"/><lit-tag v="m"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="out_prenom" npar="3"
               c="arg1: Non-final word in noun phrase, either cmp, adj or noun
                  arg2: Head noun
                  arg3: Chunk
                  Assumes apply_chunk_defnes_to_adj has been called if last word before head noun">
      <choose>
        <when c="1 cmp">
          <test><not><equal><clip pos="1" part="a_cmp"/><lit v=""/></equal></not></test>
          <out><lu><clip pos="1" part="whole"/></lu><b/></out>
        </when>
        <when c="1 adj">
          <test><not><equal><clip pos="1" part="a_adj"/><lit v=""/></equal></not></test>
          <call-macro n="clean_n.adj"><with-param pos="2"/><with-param pos="1"/><with-param pos="3"/></call-macro>
          <call-macro n="out_adj"><with-param pos="1"/><with-param pos="3"/></call-macro>
          <out><b/></out>
        </when>
        <otherwise c="1 noun">
          <out><lu><clip pos="1" part="whole"/></lu><b/></out>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="out_noun_phrase1" npar="2"
               c="arg1: Only LU, head noun
                  arg2: Chunk">
      <let><var n="n_cleaned"/><lit v="false"/></let>
      <call-macro n="clean_n"><with-param pos="1"/><with-param pos="2"/></call-macro>
      <out><lu><clip pos="1" part="whole"/></lu></out>
    </def-macro>

    <def-macro n="out_noun_phrase2" npar="3"
               c="arg1: First LU, either cmp, adj or noun
                  arg2: Second LU, head noun
                  arg3: Chunk">
      <let><var n="n_cleaned"/><lit v="false"/></let>
      <call-macro n="apply_chunk_defnes_to_adj"><with-param pos="1"/><with-param pos="3"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>

      <call-macro n="clean_n"><with-param pos="2"/><with-param pos="3"/></call-macro>
      <out><lu><clip pos="2" part="whole"/></lu></out>
    </def-macro>

    <def-macro n="out_noun_phrase3" npar="4"
               c="arg1: First LU, either cmp, adj or noun
                  arg2: Second LU, either cmp, adj or noun
                  arg3: Third LU, head noun
                  arg4: Chunk">
      <let><var n="n_cleaned"/><lit v="false"/></let>
      <call-macro n="apply_chunk_defnes_to_adj"><with-param pos="2"/><with-param pos="3"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="1"/><with-param pos="3"/><with-param pos="4"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/></call-macro>
      <call-macro n="clean_n"><with-param pos="3"/><with-param pos="4"/></call-macro>
      <out><lu><clip pos="3" part="whole"/></lu></out>
    </def-macro>

    <def-macro n="out_noun_phrase4" npar="5"
               c="arg1: First LU, either cmp, adj or noun
                  arg2: Second LU, either cmp, adj or noun
                  arg3: Third LU, either cmp, adj or noun
                  arg4: Fourth LU, head noun
                  arg5: Chunk">
      <let><var n="n_cleaned"/><lit v="false"/></let>
      <call-macro n="apply_chunk_defnes_to_adj"><with-param pos="3"/><with-param pos="4"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="1"/><with-param pos="4"/><with-param pos="5"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="2"/><with-param pos="4"/><with-param pos="5"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="3"/><with-param pos="4"/><with-param pos="5"/></call-macro>
      <call-macro n="clean_n"><with-param pos="4"/><with-param pos="5"/></call-macro>
      <out><lu><clip pos="4" part="whole"/></lu></out>
    </def-macro>

    <def-macro n="out_noun_phrase5" npar="6"
               c="arg1: First LU, either cmp, adj or noun
                  arg2: Second LU, either cmp, adj or noun
                  arg3: Third LU, either cmp, adj or noun
                  arg4: Fourth LU, either cmp, adj or noun
                  arg5: Fifth LU, head noun
                  arg6: Chunk">
      <let><var n="n_cleaned"/><lit v="false"/></let>
      <call-macro n="apply_chunk_defnes_to_adj"><with-param pos="4"/><with-param pos="5"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="1"/><with-param pos="5"/><with-param pos="6"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="2"/><with-param pos="5"/><with-param pos="6"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="3"/><with-param pos="5"/><with-param pos="6"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="4"/><with-param pos="5"/><with-param pos="6"/></call-macro>
      <call-macro n="clean_n"><with-param pos="5"/><with-param pos="6"/></call-macro>
      <out><lu><clip pos="5" part="whole"/></lu></out>
    </def-macro>

    <def-macro n="out_noun_phrase6" npar="7"
               c="arg1: First LU, either cmp, adj or noun
                  arg2: Second LU, either cmp, adj or noun
                  arg3: Third LU, either cmp, adj or noun
                  arg4: Fourth LU, either cmp, adj or noun
                  arg5: Fifth LU, either cmp, adj or noun
                  arg6: Sixth LU, head noun
                  arg7: Chunk">
      <let><var n="n_cleaned"/><lit v="false"/></let>
      <call-macro n="apply_chunk_defnes_to_adj"><with-param pos="5"/><with-param pos="6"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="1"/><with-param pos="6"/><with-param pos="7"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="2"/><with-param pos="6"/><with-param pos="7"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="3"/><with-param pos="6"/><with-param pos="7"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="4"/><with-param pos="6"/><with-param pos="7"/></call-macro>
      <call-macro n="out_prenom"><with-param pos="5"/><with-param pos="6"/><with-param pos="7"/></call-macro>
      <call-macro n="clean_n"><with-param pos="6"/><with-param pos="7"/></call-macro>
      <out><lu><clip pos="6" part="whole"/></lu></out>
    </def-macro>

</section-def-macros>


  <section-rules>

    <rule comment="CHUNK: adj2vblex
                   boka kan leses => boka kan vert lese => boka kan lesast
                   boken leses => boka vart lese => boka vart lesen">
      <pattern>
        <pattern-item n="adj2vblex"/>
      </pattern>
      <action>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: cmp_adj2vblex">
      <pattern>
        <pattern-item n="cmp_adj2vblex"/>
      </pattern>
      <action>
        <out><lu><clip pos="1" part="whole"/></lu><b/></out>
        <call-macro n="out_adj"><with-param pos="2"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: cmp_cmp_adj2vblex">
      <pattern>
        <pattern-item n="cmp_cmp_adj2vblex"/>
      </pattern>
      <action>
        <out>
          <lu><clip pos="1" part="whole"/></lu><b/>
          <lu><clip pos="2" part="whole"/></lu><b/>
        </out>
        <call-macro n="out_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: cmp_cmp_cmp_adj2vblex">
      <pattern>
        <pattern-item n="cmp_cmp_cmp_adj2vblex"/>
      </pattern>
      <action>
        <out>
          <lu><clip pos="1" part="whole"/></lu><b/>
          <lu><clip pos="2" part="whole"/></lu><b/>
          <lu><clip pos="3" part="whole"/></lu><b/>
        </out>
        <call-macro n="out_adj"><with-param pos="4"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: cmp_cmp_cmp_cmp_adj2vblex">
      <pattern>
        <pattern-item n="cmp_cmp_cmp_cmp_adj2vblex"/>
      </pattern>
      <action>
        <out>
          <lu><clip pos="1" part="whole"/></lu><b/>
          <lu><clip pos="2" part="whole"/></lu><b/>
          <lu><clip pos="3" part="whole"/></lu><b/>
          <lu><clip pos="4" part="whole"/></lu><b/>
        </out>
        <call-macro n="out_adj"><with-param pos="5"/><with-param pos="0"/></call-macro>
      </action>
    </rule>

    <rule comment="CHUNK: adj">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
      </action>
    </rule>

    <rule comment="CHUNK: det2adj">
      <pattern>
        <pattern-item n="det2adj"/>
      </pattern>
      <action>
        <let><clip pos="1" part="gen"/><clip pos="0" part="gen"/></let>
        <out><lu><clip pos="1" part="whole"/></lu></out>
      </action>
    </rule>

    <rule comment="CHUNK: prn">
      <pattern>
        <pattern-item n="prn"/>
      </pattern>
      <action>
        <choose><when>
          <test><equal><clip pos="1" part="gen"/><lit-tag v="GD"/></equal></test>
          <choose><when>
            <test><in><clip pos="0" part="gen"/><list n="dem_sg_genders"/></in></test>
            <let><clip pos="1" part="gen"/><clip pos="0" part="gen"/></let>
          </when></choose>
          <choose><when>
            <test><and>
              <equal><clip pos="1" part="lemh"/><lit v="han"/></equal>
              <equal><clip pos="1" part="gen"/><lit-tag v="f"/></equal>
            </and></test>
            <let><clip pos="1" part="lemh"/><lit v="ho"/></let>
          </when></choose>
        </when></choose>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>

    <rule comment="CHUNK: det">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="clean_det"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <choose><when>
          <test><not><equal><clip pos="1" part="lemh"/><lit v=""/></equal></not></test>
          <out>
            <lu><clip pos="1" part="whole"/></lu>
          </out>
        </when></choose>
      </action>
    </rule>

    <!-- N+ -->
    <rule comment="CHUNK: n">
      <pattern>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <let><var n="n_cleaned"/><lit v="false"/></let>
        <call-macro n="clean_n"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>

    <rule comment="CHUNK: prenom_n">
      <pattern>
        <pattern-item n="prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase2"><with-param pos="1"/><with-param pos="2"/><with-param pos="0"/></call-macro>
      </action>
    </rule>

    <rule comment="CHUNK: prenom_prenom_n">
      <pattern>
        <pattern-item n="prenom_prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase3"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: prenom_prenom_prenom_n">
      <pattern>
        <pattern-item n="prenom_prenom_prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase4"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: prenom_prenom_prenom_prenom_n">
      <pattern>
        <pattern-item n="prenom_prenom_prenom_prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase5"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/><with-param pos="5"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: prenom_prenom_prenom_prenom_prenom_n">
      <pattern>
        <pattern-item n="prenom_prenom_prenom_prenom_prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase6"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/><with-param pos="5"/><with-param pos="6"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <!-- N og N: -->
    <rule comment="CHUNK: n_cnjcoo_n">
      <pattern>
        <pattern-item n="n_cnjcoo_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase1"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out><b/><lu><clip pos="2" part="whole"/></lu><b/></out>
        <call-macro n="out_noun_phrase1"><with-param pos="3"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: n_cnjcoo_prenom_n">
      <pattern>
        <pattern-item n="n_cnjcoo_prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase1"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out><b/><lu><clip pos="2" part="whole"/></lu><b/></out>
        <call-macro n="out_noun_phrase2"><with-param pos="3"/><with-param pos="4"/><with-param pos="0"/></call-macro>
      </action>
    </rule>

    <rule comment="CHUNK: prenom_n_cnjcoo_n">
      <pattern>
        <pattern-item n="prenom_n_cnjcoo_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase2"><with-param pos="1"/><with-param pos="2"/><with-param pos="0"/></call-macro>
        <out><b/><lu><clip pos="3" part="whole"/></lu><b/></out>
        <call-macro n="out_noun_phrase1"><with-param pos="4"/><with-param pos="0"/></call-macro>
      </action>
    </rule>

    <rule comment="CHUNK: prenom_n_cnjcoo_prenom_n">
      <pattern>
        <pattern-item n="prenom_n_cnjcoo_prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase2"><with-param pos="1"/><with-param pos="2"/><with-param pos="0"/></call-macro>
        <out><b/><lu><clip pos="3" part="whole"/></lu><b/></out>
        <call-macro n="out_noun_phrase2"><with-param pos="4"/><with-param pos="5"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: prenom_prenom_n_cnjcoo_n">
      <pattern>
        <pattern-item n="prenom_prenom_n_cnjcoo_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase3"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out><b/><lu><clip pos="4" part="whole"/></lu><b/></out>
        <call-macro n="out_noun_phrase1"><with-param pos="5"/><with-param pos="0"/></call-macro>
      </action>
    </rule>
    <rule comment="CHUNK: prenom_prenom_prenom_n_cnjcoo_n">
      <pattern>
        <pattern-item n="prenom_prenom_prenom_n_cnjcoo_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase4"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/><with-param pos="4"/><with-param pos="0"/></call-macro>
        <out><b/><lu><clip pos="5" part="whole"/></lu><b/></out>
        <call-macro n="out_noun_phrase1"><with-param pos="6"/><with-param pos="0"/></call-macro>
      </action>
    </rule>

    <rule comment="CHUNK: n_cnjcoo_det_prenom_n">
      <pattern>
        <pattern-item n="n_cnjcoo_det_prenom_n"/>
      </pattern>
      <action>
        <call-macro n="out_noun_phrase1"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="2" part="whole"/></lu> <!-- cnjcoo -->
          <b/>
          <lu><clip pos="3" part="whole"/></lu> <!-- det -->
          <b/>
        </out>
        <let><var n="n_cleaned"/><lit v="false"/></let>
        <!-- Not using out_noun_phrase2 since we don't want to output determiner: -->
        <call-macro n="apply_chunk_defnes_to_adj"><with-param pos="4"/><with-param pos="0"/></call-macro>
        <call-macro n="out_prenom"><with-param pos="4"/><with-param pos="5"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n"><with-param pos="5"/><with-param pos="0"/></call-macro>
        <out><lu><clip pos="5" part="whole"/></lu></out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_cnjcoo_adj_n">
      <pattern>
        <pattern-item n="adj_cnjcoo_adj_n"/>
      </pattern>
      <action>
        <call-macro n="clean_n.adj"><with-param pos="4"/><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj_defnes"><with-param pos="4"/><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="2" part="whole"/></lu>
          <b/>
        </out>
        <call-macro n="out_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="4" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_cnjcoo_adj_adj_n">
      <pattern>
        <pattern-item n="adj_cnjcoo_adj_adj_n"/>
      </pattern>
      <action>
        <call-macro n="clean_n.adj"><with-param pos="5"/><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj"><with-param pos="5"/><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj_defnes"><with-param pos="5"/><with-param pos="4"/><with-param pos="0"/></call-macro>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="2" part="whole"/></lu>
          <b/>
        </out>
        <call-macro n="out_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out><b/></out>
        <call-macro n="out_adj"><with-param pos="4"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="5" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_cnjcoo_cmp_adj_n">
      <pattern>
        <pattern-item n="adj_cnjcoo_cmp_adj_n"/>
      </pattern>
      <action>
        <call-macro n="clean_n.adj"><with-param pos="5"/><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj_defnes"><with-param pos="5"/><with-param pos="4"/><with-param pos="0"/></call-macro>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro> <!-- små -->
        <out>
          <b/>
          <lu><clip pos="2" part="whole"/></lu>                                         <!-- og -->
          <b/>
          <lu><clip pos="3" part="whole"/></lu><b/>                                     <!-- sakte -->
        </out>
        <call-macro n="out_adj"><with-param pos="4"/><with-param pos="0"/></call-macro> <!-- veksande -->
        <out>
          <b/>
          <lu><clip pos="5" part="whole"/></lu>                                         <!-- svulstar -->
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_cnjcoo_adj_cmp_n">
      <pattern>
        <pattern-item n="adj_cnjcoo_adj_cmp_n"/>
      </pattern>
      <action>
        <call-macro n="clean_n.adj"><with-param pos="5"/><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj_defnes"><with-param pos="5"/><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="2" part="whole"/></lu>
          <b/>
        </out>
        <call-macro n="out_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="4" part="whole"/></lu><b/>
          <lu><clip pos="5" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: cmp_adj_cnjcoo_adj_cmp_n">
      <pattern>
        <pattern-item n="cmp_adj_cnjcoo_adj_cmp_n"/>
      </pattern>
      <action>
        <call-macro n="clean_n.adj"><with-param pos="6"/><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj_defnes"><with-param pos="6"/><with-param pos="4"/><with-param pos="0"/></call-macro>
        <out><lu><clip pos="1" part="whole"/></lu></out> <!-- robot -->
        <call-macro n="out_adj"><with-param pos="2"/><with-param pos="0"/></call-macro> <!-- fine -->
        <out>
          <b/>
          <b/>
          <lu><clip pos="3" part="whole"/></lu> <!-- og -->
          <b/>
        </out>
        <call-macro n="out_adj"><with-param pos="4"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="5" part="whole"/></lu><b/>
          <lu><clip pos="6" part="whole"/></lu>
        </out>
      </action>
    </rule>

    <!-- ADJ CM ADJ N -->
    <rule comment="CHUNK: adj_cm_adj_n">
      <pattern>
        <pattern-item n="adj_cm_adj_n"/>
      </pattern>
      <action>
        <call-macro n="clean_n.adj"><with-param pos="4"/><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj_defnes"><with-param pos="4"/><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="2" part="whole"/></lu>
          <b/><b/>              <!-- double because there was an empty space before comma-->
        </out>
        <call-macro n="out_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="4" part="whole"/></lu>
        </out>
      </action>
    </rule>

    <!-- ADJ ADJ ADJ N+
    TODO: "prenom_prenom_prenom_prenom_prenom_prenom_n" -->
    <rule comment="CHUNK: adj_adj_adj_cmp_cmp_cmp_n">
      <pattern>
        <pattern-item n="adj_adj_adj_cmp_cmp_cmp_n"/>
      </pattern>
      <action>
        <call-macro n="clean_n.adj"><with-param pos="7"/><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj"><with-param pos="7"/><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_n.adj_defnes"><with-param pos="7"/><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="out_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
        </out>
        <call-macro n="out_adj"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
        </out>
        <call-macro n="out_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out>
          <b/>
          <lu><clip pos="4" part="whole"/></lu><b/>
          <lu><clip pos="5" part="whole"/></lu><b/>
          <lu><clip pos="6" part="whole"/></lu><b/>
          <lu><clip pos="7" part="whole"/></lu>
        </out>
      </action>
    </rule>

  </section-rules>
</postchunk>
